# generated by fastapi-codegen:
#   filename:  modified_openapi.json
#   timestamp: 2024-11-04T22:49:09+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, constr


class Reliability(Enum):
    OK = 'OK'
    SUSPICIOUS = 'SUSPICIOUS'
    FAULTY = 'FAULTY'
    UNKNOWN = 'UNKNOWN'


class WeatherSensorValueHistoryDto(BaseModel):
    roadStationId: Optional[int] = Field(None, description='Road station id')
    sensorId: Optional[int] = Field(None, description='Sensor id')
    sensorValue: Optional[float] = Field(None, description='Sensor value')
    measured: Optional[datetime] = None
    reliability: Optional[Reliability] = Field(
        None, description='Measurement reliability information'
    )
    measuredTime: Optional[datetime] = Field(
        None, description="Value's measured date time"
    )


class RoadStationState(Enum):
    ALL = 'ALL'
    REMOVED = 'REMOVED'
    ACTIVE = 'ACTIVE'


class DOMImplementation(BaseModel):
    pass


class DOMStringList(BaseModel):
    length: Optional[int] = None


class Country(Enum):
    AT = 'AT'
    BE = 'BE'
    BG = 'BG'
    CH = 'CH'
    CS = 'CS'
    CY = 'CY'
    CZ = 'CZ'
    DE = 'DE'
    DK = 'DK'
    EE = 'EE'
    ES = 'ES'
    FI = 'FI'
    FO = 'FO'
    FR = 'FR'
    GB = 'GB'
    GG = 'GG'
    GI = 'GI'
    GR = 'GR'
    HR = 'HR'
    HU = 'HU'
    IE = 'IE'
    IM = 'IM'
    IS = 'IS'
    IT = 'IT'
    JE = 'JE'
    LI = 'LI'
    LT = 'LT'
    LU = 'LU'
    LV = 'LV'
    MA = 'MA'
    MC = 'MC'
    MK = 'MK'
    MT = 'MT'
    NL = 'NL'
    NO = 'NO'
    PL = 'PL'
    PT = 'PT'
    RO = 'RO'
    SE = 'SE'
    SI = 'SI'
    SK = 'SK'
    SM = 'SM'
    TR = 'TR'
    VA = 'VA'
    OTHER = 'OTHER'


class MultilingualStringValue(BaseModel):
    value: Optional[str] = None
    lang: Optional[str] = None


class NodeList(BaseModel):
    length: Optional[int] = None


class TypeInfo(BaseModel):
    typeName: Optional[str] = None
    typeNamespace: Optional[str] = None


class Values(BaseModel):
    values: List[MultilingualStringValue]


class Value(Enum):
    APARTMENT = 'APARTMENT'
    BUILDING = 'BUILDING'
    PO_BOX = 'PO_BOX'
    UNIT = 'UNIT'
    REGION = 'REGION'
    TOWN = 'TOWN'
    DISTRICT_TERRITORY = 'DISTRICT_TERRITORY'
    FLOOR = 'FLOOR'
    STREET = 'STREET'
    HOUSE_NUMBER = 'HOUSE_NUMBER'
    GENERAL_TEXT_LINE = 'GENERAL_TEXT_LINE'
    field__EXTENDED = '__EXTENDED'


class FieldAddressLineTypeEnum(BaseModel):
    value: Optional[Value] = None
    get_ExtendedValue: Optional[str] = None


class Value1(Enum):
    EQUAL_TO = 'EQUAL_TO'
    GREATER_THAN = 'GREATER_THAN'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    LESS_THAN = 'LESS_THAN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    field__EXTENDED = '__EXTENDED'


class FieldComparisonOperatorEnum(BaseModel):
    value: Optional[Value1] = None
    get_ExtendedValue: Optional[str] = None


class Value2(Enum):
    ARITHMETIC_AVERAGE_OF_SAMPLES_BASED_ON_A_FIXED_NUMBER_OF_SAMPLES = (
        'ARITHMETIC_AVERAGE_OF_SAMPLES_BASED_ON_A_FIXED_NUMBER_OF_SAMPLES'
    )
    ARITHMETIC_AVERAGE_OF_SAMPLES_IN_A_TIME_PERIOD = (
        'ARITHMETIC_AVERAGE_OF_SAMPLES_IN_A_TIME_PERIOD'
    )
    HARMONIC_AVERAGE_OF_SAMPLES_IN_A_TIME_PERIOD = (
        'HARMONIC_AVERAGE_OF_SAMPLES_IN_A_TIME_PERIOD'
    )
    MEDIAN_OF_SAMPLES_IN_A_TIME_PERIOD = 'MEDIAN_OF_SAMPLES_IN_A_TIME_PERIOD'
    MOVING_AVERAGE_OF_SAMPLES = 'MOVING_AVERAGE_OF_SAMPLES'
    field__EXTENDED = '__EXTENDED'


class FieldComputationMethodEnum(BaseModel):
    value: Optional[Value2] = None
    get_ExtendedValue: Optional[str] = None


class Value3(Enum):
    INTERNAL_USE = 'INTERNAL_USE'
    NO_RESTRICTION = 'NO_RESTRICTION'
    RESTRICTED_TO_AUTHORITIES = 'RESTRICTED_TO_AUTHORITIES'
    RESTRICTED_TO_AUTHORITIES_AND_TRAFFIC_OPERATORS = (
        'RESTRICTED_TO_AUTHORITIES_AND_TRAFFIC_OPERATORS'
    )
    field__EXTENDED = '__EXTENDED'


class FieldConfidentialityValueEnum(BaseModel):
    value: Optional[Value3] = None
    get_ExtendedValue: Optional[str] = None


class Value4(Enum):
    ALIGNED = 'ALIGNED'
    ALL_DIRECTIONS = 'ALL_DIRECTIONS'
    ANTICLOCKWISE = 'ANTICLOCKWISE'
    BOTH_WAYS = 'BOTH_WAYS'
    CLOCKWISE = 'CLOCKWISE'
    INNER_RING = 'INNER_RING'
    OUTER_RING = 'OUTER_RING'
    EAST_BOUND = 'EAST_BOUND'
    NORTH_BOUND = 'NORTH_BOUND'
    NORTH_EAST_BOUND = 'NORTH_EAST_BOUND'
    NORTH_WEST_BOUND = 'NORTH_WEST_BOUND'
    SOUTH_BOUND = 'SOUTH_BOUND'
    SOUTH_EAST_BOUND = 'SOUTH_EAST_BOUND'
    SOUTH_WEST_BOUND = 'SOUTH_WEST_BOUND'
    WEST_BOUND = 'WEST_BOUND'
    INBOUND_TOWARDS_TOWN = 'INBOUND_TOWARDS_TOWN'
    OUTBOUND_FROM_TOWN = 'OUTBOUND_FROM_TOWN'
    OPPOSITE = 'OPPOSITE'
    UNKNOWN = 'UNKNOWN'
    OTHER = 'OTHER'
    field__EXTENDED = '__EXTENDED'


class FieldDirectionEnum(BaseModel):
    value: Optional[Value4] = None
    get_ExtendedValue: Optional[str] = None


class Value5(Enum):
    EURO_5 = 'EURO_5'
    EURO_5_A = 'EURO_5_A'
    EURO_5_B = 'EURO_5_B'
    EURO_6 = 'EURO_6'
    EURO_6_A = 'EURO_6_A'
    EURO_6_B = 'EURO_6_B'
    EURO_6_C = 'EURO_6_C'
    EURO_V = 'EURO_V'
    EURO_VI = 'EURO_VI'
    OTHER = 'OTHER'
    field__EXTENDED = '__EXTENDED'


class GetExtendedValue(Enum):
    EURO_UNKNOWN = 'EURO_UNKNOWN'
    EURO_I = 'EURO_I'
    EURO_II = 'EURO_II'
    EURO_III = 'EURO_III'
    EURO_0 = 'EURO_0'
    EURO_4 = 'EURO_4'
    EURO_6_D = 'EURO_6_D'
    EURO_6_D_TEMP = 'EURO_6_D_TEMP'
    EURO_IV = 'EURO_IV'
    EURO_1 = 'EURO_1'
    EURO_2 = 'EURO_2'
    EURO_3 = 'EURO_3'


class FieldEmissionClassificationEuroEnum(BaseModel):
    value: Optional[Value5] = None
    get_ExtendedValue: Optional[GetExtendedValue] = None


class Value6(Enum):
    ALL = 'ALL'
    BATTERY = 'BATTERY'
    BIODIESEL = 'BIODIESEL'
    DIESEL = 'DIESEL'
    DIESEL_BATTERY_HYBRID = 'DIESEL_BATTERY_HYBRID'
    ETHANOL = 'ETHANOL'
    HYDROGEN = 'HYDROGEN'
    LIQUID_GAS = 'LIQUID_GAS'
    LPG = 'LPG'
    METHANE = 'METHANE'
    PETROL = 'PETROL'
    PETROL_95_OCTANE = 'PETROL_95_OCTANE'
    PETROL_98_OCTANE = 'PETROL_98_OCTANE'
    PETROL_BATTERY_HYBRID = 'PETROL_BATTERY_HYBRID'
    PETROL_LEADED = 'PETROL_LEADED'
    PETROL_UNLEADED = 'PETROL_UNLEADED'
    UNKNOWN = 'UNKNOWN'
    OTHER = 'OTHER'
    field__EXTENDED = '__EXTENDED'


class FieldFuelTypeEnum(BaseModel):
    value: Optional[Value6] = None
    get_ExtendedValue: Optional[str] = None


class Value7(Enum):
    ANY_GENERAL_DELIVERY_SERVICE = 'ANY_GENERAL_DELIVERY_SERVICE'
    SAFETY_SERVICES = 'SAFETY_SERVICES'
    VMS = 'VMS'
    field__EXTENDED = '__EXTENDED'


class FieldInformationDeliveryServicesEnum(BaseModel):
    value: Optional[Value7] = None
    get_ExtendedValue: Optional[str] = None


class Value8(Enum):
    REAL = 'REAL'
    SECURITY_EXERCISE = 'SECURITY_EXERCISE'
    TECHNICAL_EXERCISE = 'TECHNICAL_EXERCISE'
    TEST = 'TEST'
    field__EXTENDED = '__EXTENDED'


class FieldInformationStatusEnum(BaseModel):
    value: Optional[Value8] = None
    get_ExtendedValue: Optional[str] = None


class Value9(Enum):
    ALL_LANES_COMPLETE_CARRIAGEWAY = 'ALL_LANES_COMPLETE_CARRIAGEWAY'
    BUS_LANE = 'BUS_LANE'
    BUS_STOP = 'BUS_STOP'
    CAR_POOL_LANE = 'CAR_POOL_LANE'
    CENTRAL_RESERVATION = 'CENTRAL_RESERVATION'
    CRAWLER_LANE = 'CRAWLER_LANE'
    CYCLE_LANE = 'CYCLE_LANE'
    EMERGENCY_LANE = 'EMERGENCY_LANE'
    ESCAPE_LANE = 'ESCAPE_LANE'
    EXPRESS_LANE = 'EXPRESS_LANE'
    HARD_SHOULDER = 'HARD_SHOULDER'
    HEAVY_VEHICLE_LANE = 'HEAVY_VEHICLE_LANE'
    LAY_BY = 'LAY_BY'
    LEFT_HAND_TURNING_LANE = 'LEFT_HAND_TURNING_LANE'
    LEFT_LANE = 'LEFT_LANE'
    LOCAL_TRAFFIC_LANE = 'LOCAL_TRAFFIC_LANE'
    MIDDLE_LANE = 'MIDDLE_LANE'
    OVERTAKING_LANE = 'OVERTAKING_LANE'
    RIGHT_HAND_TURNING_LANE = 'RIGHT_HAND_TURNING_LANE'
    RIGHT_LANE = 'RIGHT_LANE'
    RUSH_HOUR_LANE = 'RUSH_HOUR_LANE'
    SET_DOWN_AREA = 'SET_DOWN_AREA'
    SLOW_VEHICLE_LANE = 'SLOW_VEHICLE_LANE'
    THROUGH_TRAFFIC_LANE = 'THROUGH_TRAFFIC_LANE'
    TIDAL_FLOW_LANE = 'TIDAL_FLOW_LANE'
    TURNING_LANE = 'TURNING_LANE'
    VERGE = 'VERGE'
    field__EXTENDED = '__EXTENDED'


class GetExtendedValue1(Enum):
    ADVISORY_CYCLE_LANE = 'ADVISORY_CYCLE_LANE'
    BRIDLE_PATH = 'BRIDLE_PATH'
    BUS_AND_CYCLE_LANE = 'BUS_AND_CYCLE_LANE'
    FOOT_AND_CYCLE_PATH = 'FOOT_AND_CYCLE_PATH'
    GUIDED_BUS_WAY = 'GUIDED_BUS_WAY'
    TAXI_LANE = 'TAXI_LANE'
    TAXI_RANK = 'TAXI_RANK'
    TOLL_LANE = 'TOLL_LANE'
    TROLLEY_BUS_LANE = 'TROLLEY_BUS_LANE'


class FieldLaneEnum(BaseModel):
    value: Optional[Value9] = None
    get_ExtendedValue: Optional[GetExtendedValue1] = None


class Value10(Enum):
    ABNORMAL_LOAD = 'ABNORMAL_LOAD'
    AMMUNITION = 'AMMUNITION'
    CHEMICALS = 'CHEMICALS'
    COMBUSTIBLE_MATERIALS = 'COMBUSTIBLE_MATERIALS'
    CORROSIVE_MATERIALS = 'CORROSIVE_MATERIALS'
    DEBRIS = 'DEBRIS'
    EMPTY = 'EMPTY'
    EXPLOSIVE_MATERIALS = 'EXPLOSIVE_MATERIALS'
    EXTRA_HIGH_LOAD = 'EXTRA_HIGH_LOAD'
    EXTRA_LONG_LOAD = 'EXTRA_LONG_LOAD'
    EXTRA_WIDE_LOAD = 'EXTRA_WIDE_LOAD'
    FUEL = 'FUEL'
    GLASS = 'GLASS'
    GOODS = 'GOODS'
    HAZARDOUS_MATERIALS = 'HAZARDOUS_MATERIALS'
    LIQUID = 'LIQUID'
    LIVESTOCK = 'LIVESTOCK'
    MATERIALS = 'MATERIALS'
    MATERIALS_DANGEROUS_FOR_PEOPLE = 'MATERIALS_DANGEROUS_FOR_PEOPLE'
    MATERIALS_DANGEROUS_FOR_THE_ENVIRONMENT = 'MATERIALS_DANGEROUS_FOR_THE_ENVIRONMENT'
    MATERIALS_DANGEROUS_FOR_WATER = 'MATERIALS_DANGEROUS_FOR_WATER'
    OIL = 'OIL'
    ORDINARY = 'ORDINARY'
    PERISHABLE_PRODUCTS = 'PERISHABLE_PRODUCTS'
    PETROL = 'PETROL'
    PHARMACEUTICAL_MATERIALS = 'PHARMACEUTICAL_MATERIALS'
    RADIOACTIVE_MATERIALS = 'RADIOACTIVE_MATERIALS'
    REFRIGERATED_GOODS = 'REFRIGERATED_GOODS'
    REFUSE = 'REFUSE'
    TOXIC_MATERIALS = 'TOXIC_MATERIALS'
    VEHICLES = 'VEHICLES'
    OTHER = 'OTHER'
    field__EXTENDED = '__EXTENDED'


class FieldLoadTypeEnum(BaseModel):
    value: Optional[Value10] = None
    get_ExtendedValue: Optional[str] = None


class Value11(Enum):
    LOW_LEVEL_EMISSION = 'LOW_LEVEL_EMISSION'
    FREE_OF_EMISSION = 'FREE_OF_EMISSION'
    field__EXTENDED = '__EXTENDED'


class FieldLowEmissionLevelEnum(BaseModel):
    value: Optional[Value11] = None
    get_ExtendedValue: Optional[str] = None


class Value12(Enum):
    HUMIDITY_INFORMATION = 'HUMIDITY_INFORMATION'
    INDIVIDUAL_VEHICLE_MEASUREMENTS = 'INDIVIDUAL_VEHICLE_MEASUREMENTS'
    POLLUTION_INFORMATION = 'POLLUTION_INFORMATION'
    PRECIPITATION_INFORMATION = 'PRECIPITATION_INFORMATION'
    PRESSURE_INFORMATION = 'PRESSURE_INFORMATION'
    ROAD_SURFACE_CONDITION_INFORMATION = 'ROAD_SURFACE_CONDITION_INFORMATION'
    TEMPERATURE_INFORMATION = 'TEMPERATURE_INFORMATION'
    TRAFFIC_CONCENTRATION = 'TRAFFIC_CONCENTRATION'
    TRAFFIC_FLOW = 'TRAFFIC_FLOW'
    TRAFFIC_GAP = 'TRAFFIC_GAP'
    TRAFFIC_HEADWAY = 'TRAFFIC_HEADWAY'
    TRAFFIC_SPEED = 'TRAFFIC_SPEED'
    TRAFFIC_STATUS_INFORMATION = 'TRAFFIC_STATUS_INFORMATION'
    TRAVEL_TIME_INFORMATION = 'TRAVEL_TIME_INFORMATION'
    VISIBILITY_INFORMATION = 'VISIBILITY_INFORMATION'
    WIND_INFORMATION = 'WIND_INFORMATION'
    field__EXTENDED = '__EXTENDED'


class FieldMeasuredOrDerivedDataTypeEnum(BaseModel):
    value: Optional[Value12] = None
    get_ExtendedValue: Optional[str] = None


class Value13(Enum):
    NOT_USING_SNOW_CHAINS = 'NOT_USING_SNOW_CHAINS'
    NOT_USING_SNOW_CHAINS_OR_TYRES = 'NOT_USING_SNOW_CHAINS_OR_TYRES'
    SNOW_CHAINS_IN_USE = 'SNOW_CHAINS_IN_USE'
    SNOW_TYRES_IN_USE = 'SNOW_TYRES_IN_USE'
    SNOW_CHAINS_OR_TYRES_IN_USE = 'SNOW_CHAINS_OR_TYRES_IN_USE'
    WITHOUT_SNOW_TYRES_OR_CHAINS_ON_BOARD = 'WITHOUT_SNOW_TYRES_OR_CHAINS_ON_BOARD'
    field__EXTENDED = '__EXTENDED'


class FieldVehicleEquipmentEnum(BaseModel):
    value: Optional[Value13] = None
    get_ExtendedValue: Optional[str] = None


class Value14(Enum):
    AGRICULTURAL_VEHICLE = 'AGRICULTURAL_VEHICLE'
    ANY_VEHICLE = 'ANY_VEHICLE'
    ARTICULATED_BUS = 'ARTICULATED_BUS'
    ARTICULATED_TROLLEY_BUS = 'ARTICULATED_TROLLEY_BUS'
    ARTICULATED_VEHICLE = 'ARTICULATED_VEHICLE'
    BICYCLE = 'BICYCLE'
    BUS = 'BUS'
    CAR = 'CAR'
    CARAVAN = 'CARAVAN'
    CAR_OR_LIGHT_VEHICLE = 'CAR_OR_LIGHT_VEHICLE'
    CAR_WITH_CARAVAN = 'CAR_WITH_CARAVAN'
    CAR_WITH_TRAILER = 'CAR_WITH_TRAILER'
    CONSTRUCTION_OR_MAINTENANCE_VEHICLE = 'CONSTRUCTION_OR_MAINTENANCE_VEHICLE'
    FOUR_WHEEL_DRIVE = 'FOUR_WHEEL_DRIVE'
    HEAVY_GOODS_VEHICLE = 'HEAVY_GOODS_VEHICLE'
    HEAVY_GOODS_VEHICLE_WITH_TRAILER = 'HEAVY_GOODS_VEHICLE_WITH_TRAILER'
    HEAVY_DUTY_TRANSPORTER = 'HEAVY_DUTY_TRANSPORTER'
    HEAVY_VEHICLE = 'HEAVY_VEHICLE'
    HIGH_SIDED_VEHICLE = 'HIGH_SIDED_VEHICLE'
    LIGHT_COMMERCIAL_VEHICLE = 'LIGHT_COMMERCIAL_VEHICLE'
    LARGE_CAR = 'LARGE_CAR'
    LARGE_GOODS_VEHICLE = 'LARGE_GOODS_VEHICLE'
    LIGHT_COMMERCIAL_VEHICLE_WITH_TRAILER = 'LIGHT_COMMERCIAL_VEHICLE_WITH_TRAILER'
    LONG_HEAVY_LORRY = 'LONG_HEAVY_LORRY'
    LORRY = 'LORRY'
    METRO = 'METRO'
    MINIBUS = 'MINIBUS'
    MOPED = 'MOPED'
    MOTORCYCLE = 'MOTORCYCLE'
    MOTORCYCLE_WITH_SIDE_CAR = 'MOTORCYCLE_WITH_SIDE_CAR'
    MOTORHOME = 'MOTORHOME'
    MOTORSCOOTER = 'MOTORSCOOTER'
    PASSENGER_CAR = 'PASSENGER_CAR'
    SMALL_CAR = 'SMALL_CAR'
    TANKER = 'TANKER'
    THREE_WHEELED_VEHICLE = 'THREE_WHEELED_VEHICLE'
    TRAILER = 'TRAILER'
    TRAM = 'TRAM'
    TROLLEY_BUS = 'TROLLEY_BUS'
    TWO_WHEELED_VEHICLE = 'TWO_WHEELED_VEHICLE'
    VAN = 'VAN'
    VEHICLE_WITH_CARAVAN = 'VEHICLE_WITH_CARAVAN'
    VEHICLE_WITH_CATALYTIC_CONVERTER = 'VEHICLE_WITH_CATALYTIC_CONVERTER'
    VEHICLE_WITHOUT_CATALYTIC_CONVERTER = 'VEHICLE_WITHOUT_CATALYTIC_CONVERTER'
    VEHICLE_WITH_TRAILER = 'VEHICLE_WITH_TRAILER'
    WITH_EVEN_NUMBERED_REGISTRATION_PLATES = 'WITH_EVEN_NUMBERED_REGISTRATION_PLATES'
    WITH_ODD_NUMBERED_REGISTRATION_PLATES = 'WITH_ODD_NUMBERED_REGISTRATION_PLATES'
    UNKNOWN = 'UNKNOWN'
    OTHER = 'OTHER'
    field__EXTENDED = '__EXTENDED'


class GetExtendedValue2(Enum):
    ELECTRIC_BIKE = 'ELECTRIC_BIKE'
    ELECTRIC_SCOOTER = 'ELECTRIC_SCOOTER'
    PERSONAL_LIGHT_ELECTRIC_VEHICLE = 'PERSONAL_LIGHT_ELECTRIC_VEHICLE'


class FieldVehicleTypeEnum(BaseModel):
    value: Optional[Value14] = None
    get_ExtendedValue: Optional[GetExtendedValue2] = None


class Value15(Enum):
    AGRICULTURAL = 'AGRICULTURAL'
    CAR_SHARING = 'CAR_SHARING'
    CITY_LOGISTICS = 'CITY_LOGISTICS'
    COMMERCIAL = 'COMMERCIAL'
    EMERGENCY_SERVICES = 'EMERGENCY_SERVICES'
    MILITARY = 'MILITARY'
    NON_COMMERCIAL = 'NON_COMMERCIAL'
    PATROL = 'PATROL'
    RECOVERY_SERVICES = 'RECOVERY_SERVICES'
    ROAD_MAINTENANCE_OR_CONSTRUCTION = 'ROAD_MAINTENANCE_OR_CONSTRUCTION'
    ROAD_OPERATOR = 'ROAD_OPERATOR'
    TAXI = 'TAXI'
    field__EXTENDED = '__EXTENDED'


class FieldVehicleUsageEnum(BaseModel):
    value: Optional[Value15] = None
    get_ExtendedValue: Optional[str] = None


class Value16(Enum):
    ACTUAL = 'ACTUAL'
    MAXIMUM_PERMITTED = 'MAXIMUM_PERMITTED'
    field__EXTENDED = '__EXTENDED'


class FieldWeightTypeEnum(BaseModel):
    value: Optional[Value16] = None
    get_ExtendedValue: Optional[str] = None


class ExtensionTypeG(BaseModel):
    pass


class Value17(Enum):
    applicationRegion = 'applicationRegion'
    continent = 'continent'
    country = 'country'
    countryGroup = 'countryGroup'
    carParkArea = 'carParkArea'
    carpoolArea = 'carpoolArea'
    fuzzyArea = 'fuzzyArea'
    industrialArea = 'industrialArea'
    lake = 'lake'
    meteorologicalArea = 'meteorologicalArea'
    metropolitanArea = 'metropolitanArea'
    municipality = 'municipality'
    parkAndRideSite = 'parkAndRideSite'
    ruralCounty = 'ruralCounty'
    sea = 'sea'
    touristArea = 'touristArea'
    trafficArea = 'trafficArea'
    urbanCounty = 'urbanCounty'
    order1AdministrativeArea = 'order1AdministrativeArea'
    order2AdministrativeArea = 'order2AdministrativeArea'
    order3AdministrativeArea = 'order3AdministrativeArea'
    order4AdministrativeArea = 'order4AdministrativeArea'
    order5AdministrativeArea = 'order5AdministrativeArea'
    policeForceControlArea = 'policeForceControlArea'
    roadOperatorControlArea = 'roadOperatorControlArea'
    waterArea = 'waterArea'
    extendedG = 'extendedG'


class NamedAreaTypeEnumG(BaseModel):
    value: Value17
    extendedValueG: Optional[str] = None


class TimePrecision(Enum):
    TENTHS_OF_SECOND = 'TENTHS_OF_SECOND'
    SECOND = 'SECOND'
    MINUTE = 'MINUTE'
    QUARTER_HOUR = 'QUARTER_HOUR'
    HALF_HOUR = 'HALF_HOUR'
    HOUR = 'HOUR'
    field__EXTENDED = '__EXTENDED'


class Value18(Enum):
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'
    SUNDAY = 'SUNDAY'
    field__EXTENDED = '__EXTENDED'


class FieldDayEnum(BaseModel):
    value: Optional[Value18] = None
    get_ExtendedValue: Optional[str] = None


class FieldMeasurementSiteTableVersionedReference(BaseModel):
    id: Optional[str] = None
    version: Optional[str] = None


class FieldMeasurementSiteVersionedReference(BaseModel):
    id: Optional[str] = None
    version: Optional[str] = None


class Value19(Enum):
    JANUARY = 'JANUARY'
    FEBRUARY = 'FEBRUARY'
    MARCH = 'MARCH'
    APRIL = 'APRIL'
    MAY = 'MAY'
    JUNE = 'JUNE'
    JULY = 'JULY'
    AUGUST = 'AUGUST'
    SEPTEMBER = 'SEPTEMBER'
    OCTOBER = 'OCTOBER'
    NOVEMBER = 'NOVEMBER'
    DECEMBER = 'DECEMBER'
    field__EXTENDED = '__EXTENDED'


class FieldMonthOfYearEnum(BaseModel):
    value: Optional[Value19] = None
    get_ExtendedValue: Optional[str] = None


class Value20(Enum):
    INTERMITTENT_DATA_VALUES = 'INTERMITTENT_DATA_VALUES'
    NO_DATA_VALUES_AVAILABLE = 'NO_DATA_VALUES_AVAILABLE'
    SPURIOUS_UNRELIABLE_DATA_VALUES = 'SPURIOUS_UNRELIABLE_DATA_VALUES'
    UNSPECIFIED_OR_UNKNOWN_FAULT = 'UNSPECIFIED_OR_UNKNOWN_FAULT'
    OTHER = 'OTHER'
    field__EXTENDED = '__EXTENDED'


class FieldPhysicalQuantityFaultEnum(BaseModel):
    value: Optional[Value20] = None
    get_ExtendedValue: Optional[str] = None


class Value21(Enum):
    AGRICULTURAL_SHOW = 'AGRICULTURAL_SHOW'
    AIR_SHOW = 'AIR_SHOW'
    ART_EVENT = 'ART_EVENT'
    ATHLETICS_MEETING = 'ATHLETICS_MEETING'
    COMMERCIAL_EVENT = 'COMMERCIAL_EVENT'
    CULTURAL_EVENT = 'CULTURAL_EVENT'
    BALL_GAME = 'BALL_GAME'
    BASEBALL_GAME = 'BASEBALL_GAME'
    BASKETBALL_GAME = 'BASKETBALL_GAME'
    BEER_FESTIVAL = 'BEER_FESTIVAL'
    BICYCLE_RACE = 'BICYCLE_RACE'
    BOAT_RACE = 'BOAT_RACE'
    BOAT_SHOW = 'BOAT_SHOW'
    BOXING_TOURNAMENT = 'BOXING_TOURNAMENT'
    BULL_FIGHT = 'BULL_FIGHT'
    CEREMONIAL_EVENT = 'CEREMONIAL_EVENT'
    CONCERT = 'CONCERT'
    CRICKET_MATCH = 'CRICKET_MATCH'
    EXHIBITION = 'EXHIBITION'
    FAIR = 'FAIR'
    FESTIVAL = 'FESTIVAL'
    FILM_FESTIVAL = 'FILM_FESTIVAL'
    FILM_TV_MAKING = 'FILM_TV_MAKING'
    FIREWORK_DISPLAY = 'FIREWORK_DISPLAY'
    FLOWER_EVENT = 'FLOWER_EVENT'
    FOOD_FESTIVAL = 'FOOD_FESTIVAL'
    FOOTBALL_MATCH = 'FOOTBALL_MATCH'
    FUNFAIR = 'FUNFAIR'
    GARDENING_OR_FLOWER_SHOW = 'GARDENING_OR_FLOWER_SHOW'
    GOLF_TOURNAMENT = 'GOLF_TOURNAMENT'
    HOCKEY_GAME = 'HOCKEY_GAME'
    HORSE_RACE_MEETING = 'HORSE_RACE_MEETING'
    INTERNATIONAL_SPORTS_MEETING = 'INTERNATIONAL_SPORTS_MEETING'
    MAJOR_EVENT = 'MAJOR_EVENT'
    MARATHON = 'MARATHON'
    MARKET = 'MARKET'
    MATCH = 'MATCH'
    MOTOR_SHOW = 'MOTOR_SHOW'
    MOTOR_SPORT_RACE_MEETING = 'MOTOR_SPORT_RACE_MEETING'
    OPEN_AIR_CONCERT = 'OPEN_AIR_CONCERT'
    PARADE = 'PARADE'
    PROCESSION = 'PROCESSION'
    RACE_MEETING = 'RACE_MEETING'
    RUGBY_MATCH = 'RUGBY_MATCH'
    SEVERAL_MAJOR_EVENTS = 'SEVERAL_MAJOR_EVENTS'
    SHOW = 'SHOW'
    SHOW_JUMPING = 'SHOW_JUMPING'
    SOUND_AND_LIGHT_SHOW = 'SOUND_AND_LIGHT_SHOW'
    SPORTS_MEETING = 'SPORTS_MEETING'
    STATE_OCCASION = 'STATE_OCCASION'
    STREET_FESTIVAL = 'STREET_FESTIVAL'
    TENNIS_TOURNAMENT = 'TENNIS_TOURNAMENT'
    THEATRICAL_EVENT = 'THEATRICAL_EVENT'
    TOURNAMENT = 'TOURNAMENT'
    TRADE_FAIR = 'TRADE_FAIR'
    WATER_SPORTS_MEETING = 'WATER_SPORTS_MEETING'
    WINE_FESTIVAL = 'WINE_FESTIVAL'
    WINTER_SPORTS_MEETING = 'WINTER_SPORTS_MEETING'
    UNKNOWN = 'UNKNOWN'
    OTHER = 'OTHER'
    field__EXTENDED = '__EXTENDED'


class FieldPublicEventTypeEnum(BaseModel):
    value: Optional[Value21] = None
    get_ExtendedValue: Optional[str] = None


class Value22(Enum):
    AUTOMOBILE_CLUB_PATROL = 'AUTOMOBILE_CLUB_PATROL'
    CAMERA_OBSERVATION = 'CAMERA_OBSERVATION'
    FREIGHT_VEHICLE_OPERATOR = 'FREIGHT_VEHICLE_OPERATOR'
    INDUCTION_LOOP_MONITORING_STATION = 'INDUCTION_LOOP_MONITORING_STATION'
    INFRARED_MONITORING_STATION = 'INFRARED_MONITORING_STATION'
    MICROWAVE_MONITORING_STATION = 'MICROWAVE_MONITORING_STATION'
    MOBILE_TELEPHONE_CALLER = 'MOBILE_TELEPHONE_CALLER'
    NON_POLICE_EMERGENCY_SERVICE_PATROL = 'NON_POLICE_EMERGENCY_SERVICE_PATROL'
    OTHER_INFORMATION = 'OTHER_INFORMATION'
    OTHER_OFFICIAL_VEHICLE = 'OTHER_OFFICIAL_VEHICLE'
    POLICE_PATROL = 'POLICE_PATROL'
    PRIVATE_BREAKDOWN_SERVICE = 'PRIVATE_BREAKDOWN_SERVICE'
    PUBLIC_AND_PRIVATE_UTILITIES = 'PUBLIC_AND_PRIVATE_UTILITIES'
    REGISTERED_MOTORIST_OBSERVER = 'REGISTERED_MOTORIST_OBSERVER'
    ROAD_AUTHORITIES = 'ROAD_AUTHORITIES'
    ROAD_OPERATOR_PATROL = 'ROAD_OPERATOR_PATROL'
    ROADSIDE_TELEPHONE_CALLER = 'ROADSIDE_TELEPHONE_CALLER'
    SPOTTER_AIRCRAFT = 'SPOTTER_AIRCRAFT'
    TRAFFIC_MONITORING_STATION = 'TRAFFIC_MONITORING_STATION'
    TRANSIT_OPERATOR = 'TRANSIT_OPERATOR'
    VEHICLE_PROBE_MEASUREMENT = 'VEHICLE_PROBE_MEASUREMENT'
    VIDEO_PROCESSING_MONITORING_STATION = 'VIDEO_PROCESSING_MONITORING_STATION'
    field__EXTENDED = '__EXTENDED'


class FieldSourceTypeEnum(BaseModel):
    value: Optional[Value22] = None
    get_ExtendedValue: Optional[str] = None


class Value23(Enum):
    DAY_BEFORE_PUBLIC_HOLIDAY = 'DAY_BEFORE_PUBLIC_HOLIDAY'
    PUBLIC_HOLIDAY = 'PUBLIC_HOLIDAY'
    DAY_FOLLOWING_PUBLIC_HOLIDAY = 'DAY_FOLLOWING_PUBLIC_HOLIDAY'
    LONG_WEEKEND_DAY = 'LONG_WEEKEND_DAY'
    IN_LIEU_OF_PUBLIC_HOLIDAY = 'IN_LIEU_OF_PUBLIC_HOLIDAY'
    SCHOOL_DAY = 'SCHOOL_DAY'
    SCHOOL_HOLIDAYS = 'SCHOOL_HOLIDAYS'
    PUBLIC_EVENT_DAY = 'PUBLIC_EVENT_DAY'
    OTHER = 'OTHER'
    field__EXTENDED = '__EXTENDED'


class FieldSpecialDayTypeEnum(BaseModel):
    value: Optional[Value23] = None
    get_ExtendedValue: Optional[str] = None


class Value24(Enum):
    BEGIN_TIME = 'BEGIN_TIME'
    END_TIME = 'END_TIME'
    MIDDLE_TIME = 'MIDDLE_TIME'
    field__EXTENDED = '__EXTENDED'


class FieldTimeMeaningEnum(BaseModel):
    value: Optional[Value24] = None
    get_ExtendedValue: Optional[str] = None


class SvgModel(BaseModel):
    pass


class Empty(BaseModel):
    pass


class XmlModel(BaseModel):
    pass


class CSVDataModel(BaseModel):
    pass


class Type(Enum):
    FeatureCollection = 'FeatureCollection'


class JsonDataResponseModelItem(BaseModel):
    dataTimestamp: Optional[datetime] = Field(None, description='Data interval start')
    count: Optional[float] = Field(None, description='Counter count')
    interval: Optional[float] = Field(None, description='Interval length in minutes')
    status: Optional[float] = Field(None, description='Counter status')


class Type1(Enum):
    Feature = 'Feature'


class UserTypesResponseModel(BaseModel):
    pass


class CounterModel(BaseModel):
    domain: Optional[str] = Field(None, description='Domain name')
    name: Optional[str] = Field(None, description='Counter name')
    interval: Optional[int] = Field(
        None, description='Data recording interval in minutes'
    )
    lastDataTimestamp: Optional[datetime] = Field(
        None, description='Timestamp of last data'
    )
    removedTimestamp: Optional[datetime] = Field(None, description='Removal timestamp')
    id: Optional[int] = Field(None, description='Counter id')
    userType: Optional[int] = Field(None, description='Counter type')
    dataUpdatedTime: Optional[datetime] = Field(
        None, description='Data updated timestamp'
    )
    direction: Optional[int] = Field(None, description='Counter direction')


class DomainsResponseModel(BaseModel):
    addedTimestamp: Optional[datetime] = Field(None, description='Domain added')
    name: Optional[str] = Field(None, description='Domain name')
    description: Optional[str] = Field(None, description='Domain description')
    removedTimestamp: Optional[datetime] = Field(None, description='Domain removed')


class Type2(Enum):
    Point = 'Point'


class WeathercamPresetSimpleV1(BaseModel):
    id: Optional[str] = Field(None, description='Id of preset')
    inCollection: Optional[bool] = Field(None, description='Is preset in collection')


class CollectionStatus(Enum):
    GATHERING = 'GATHERING'
    REMOVED_TEMPORARILY = 'REMOVED_TEMPORARILY'
    REMOVED_PERMANENTLY = 'REMOVED_PERMANENTLY'


class State(Enum):
    OK = 'OK'
    OK_FAULT_DOUBT_CANCELLED = 'OK_FAULT_DOUBT_CANCELLED'
    FAULT_DOUBT = 'FAULT_DOUBT'
    FAULT_CONFIRMED = 'FAULT_CONFIRMED'
    FAULT_CONFIRMED_NOT_FIXED_IN_NEAR_FUTURE = (
        'FAULT_CONFIRMED_NOT_FIXED_IN_NEAR_FUTURE'
    )
    REPAIR_REQUEST_POSTED = 'REPAIR_REQUEST_POSTED'
    REPAIR_MAINTENANCE_DONE = 'REPAIR_MAINTENANCE_DONE'
    REPAIR_INTERRUPTED = 'REPAIR_INTERRUPTED'


class WeathercamStationPropertiesSimpleV1(BaseModel):
    id: str = Field(..., description='Id of the road station')
    name: Optional[str] = Field(None, description='Common name of road station')
    collectionStatus: Optional[CollectionStatus] = Field(
        None, description='Data collection status'
    )
    state: Optional[State] = Field(None, description='Road station state')
    dataUpdatedTime: Optional[datetime] = Field(
        None, description='Data last updated date time'
    )
    presets: Optional[List[WeathercamPresetSimpleV1]] = Field(
        None, description='Weathercam presets'
    )


class Carriageway(Enum):
    ONE_CARRIAGEWAY = 'ONE_CARRIAGEWAY'
    DUAL_CARRIAGEWAY_RIGHT_IN_INCREASING_DIRECTION = (
        'DUAL_CARRIAGEWAY_RIGHT_IN_INCREASING_DIRECTION'
    )
    DUAL_CARRIAGEWAY_LEFT_IN_INCREASING_DIRECTION = (
        'DUAL_CARRIAGEWAY_LEFT_IN_INCREASING_DIRECTION'
    )


class Side(Enum):
    UNKNOWN = 'UNKNOWN'
    RIGHT = 'RIGHT'
    LEFT = 'LEFT'
    BETWEEN = 'BETWEEN'
    END = 'END'
    MIDDLE = 'MIDDLE'
    CROSS = 'CROSS'


class StationRoadAddressV1(BaseModel):
    roadNumber: Optional[int] = Field(
        None, description='Road number (values 1–99999)', example=7
    )
    roadSection: Optional[int] = Field(
        None, description='Road section (values 1–999)', example=8
    )
    distanceFromRoadSectionStart: Optional[int] = Field(
        None, description='Distance from start of the road portion [m]', example=3801
    )
    carriageway: Optional[Carriageway] = Field(
        None,
        description="Carriageway <br>ONE_CARRIAGEWAY:                                0 = One carriageway road section <br>DUAL_CARRIAGEWAY_RIGHT_IN_INCREASING_DIRECTION: 1 = Dual carriageway's right carriageway on increasing direction <br>DUAL_CARRIAGEWAY_LEFT_IN_INCREASING_DIRECTION:  2 = Dual carriageway's left carriageway on increasing direction (upstream)",
    )
    side: Optional[Side] = Field(
        None,
        description='Road address side information <br>* UNKNOWN: 0 = Unknown, <br>* RIGHT    1 = On the right side of the carriageway in the increasing direction, <br>* LEFT:    2 = On the left side of the carriageway in the increasing direction, <br>* BETWEEN: 3 = Between the carriageways, <br>* END:     7 = At the end of the road, <br>* MIDDLE:  8 = In the middle of the carriageway / on the carriageway, <br>* CROSS:   9 = Across the road',
    )
    contractArea: Optional[str] = Field(
        None, description='Road contract area', example='Espoo 19-24'
    )
    contractAreaCode: Optional[int] = Field(
        None, description='Road contract area code', example=142
    )


class WeathercamPresetDirectionV1(Enum):
    UNKNOWN = 'UNKNOWN'
    INCREASING_DIRECTION = 'INCREASING_DIRECTION'
    DECREASING_DIRECTION = 'DECREASING_DIRECTION'
    CROSSING_ROAD_INCREASING_DIRECTION = 'CROSSING_ROAD_INCREASING_DIRECTION'
    CROSSING_ROAD_DECREASING_DIRECTION = 'CROSSING_ROAD_DECREASING_DIRECTION'
    SPECIAL_DIRECTION = 'SPECIAL_DIRECTION'


class CameraType(Enum):
    VAPIX = 'VAPIX'
    VMX_MPC = 'VMX_MPC'
    VMX_MPH = 'VMX_MPH'
    D_LINK = 'D_LINK'
    ZAVIO = 'ZAVIO'
    ENEO = 'ENEO'
    BOSCH = 'BOSCH'
    SONY = 'SONY'
    HIKVISION = 'HIKVISION'
    OLD = 'OLD'


class WeathercamPresetHistoryItemDtoV1(BaseModel):
    lastModified: Optional[datetime] = Field(
        None, description='Last modified date of the image.'
    )
    imageUrl: Optional[str] = Field(None, description='Url to read the image.')
    sizeBytes: Optional[int] = Field(None, description='Image size in bytes.')


class WeathercamPresetDataV1(BaseModel):
    id: str = Field(..., description='Id of the weathercam preset')
    measuredTime: datetime = Field(..., description='Latest measurement time')


class WeathercamStationDataV1(BaseModel):
    id: str = Field(..., description='Id of the road station')
    dataUpdatedTime: Optional[datetime] = Field(
        None, description='Time when data was last updated'
    )
    presets: List[WeathercamPresetDataV1] = Field(
        ..., description='Weathercam presets data'
    )


class WeathercamStationsDataV1(BaseModel):
    dataUpdatedTime: datetime = Field(
        ..., description='Time when data was last updated'
    )
    stations: Optional[List[WeathercamStationDataV1]] = Field(
        None, description='Stations data'
    )


class WeathercamPresetPublicityHistoryV1(BaseModel):
    id: str = Field(..., description='Id of the weathercam preset')
    measuredTime: Optional[datetime] = Field(
        None,
        description='The time when change took place. Same as the last modified date of the related image version.',
    )
    publishableTo: Optional[bool] = Field(None, description='New state for publicity')
    modifiedTime: Optional[datetime] = Field(
        None, description='Modification time of the history.'
    )


class WeathercamStationPresetsPublicityHistoryV1(BaseModel):
    id: str = Field(..., description='Id of the road station')
    dataUpdatedTime: Optional[datetime] = Field(
        None, description='Time when data was last updated'
    )
    presets: List[WeathercamPresetPublicityHistoryV1] = Field(
        ..., description='Id of the weathercam station'
    )


class WeathercamStationsPresetsPublicityHistoryV1(BaseModel):
    dataUpdatedTime: Optional[datetime] = Field(
        None,
        description='Latest history change time. Use this value as parameter for next query in api.',
    )
    stations: Optional[List[WeathercamStationPresetsPublicityHistoryV1]] = Field(
        None, description='Stations data'
    )


class WeatherStationPropertiesSimpleV1(BaseModel):
    id: int = Field(..., description='Id of the road station')
    name: Optional[str] = Field(None, description='Common name of road station')
    collectionStatus: Optional[CollectionStatus] = Field(
        None, description='Data collection status'
    )
    state: Optional[State] = Field(None, description='Road station state')
    dataUpdatedTime: Optional[datetime] = Field(
        None, description='Data last updated date time'
    )


class StationType(Enum):
    ROSA = 'ROSA'
    RWS_200 = 'RWS_200'
    E_18 = 'E_18'
    FINAVIA_V = 'FINAVIA_V'
    FINAVIA_B = 'FINAVIA_B'
    ELY_B = 'ELY_B'
    ISGN = 'ISGN'
    VAISALA_API = 'VAISALA_API'
    OLD = 'OLD'
    FINAVIA = 'FINAVIA'


class WeatherStationPropertiesDetailedV1(BaseModel):
    id: int = Field(..., description='Id of the road station')
    name: Optional[str] = Field(None, description='Common name of road station')
    collectionStatus: Optional[CollectionStatus] = Field(
        None, description='Data collection status'
    )
    state: Optional[State] = Field(None, description='Road station state')
    dataUpdatedTime: Optional[datetime] = Field(
        None, description='Data last updated date time'
    )
    collectionInterval: Optional[int] = Field(
        None, description='Data collection interval [s]'
    )
    names: Optional[Dict[str, str]] = Field(
        None,
        description='Map of names [fi, sv, en]',
        example={
            'fi': 'Tie 7 Porvoo, Harabacka',
            'sv': 'Väg 7 Borgå, Harabacka',
            'en': 'Road 7 Porvoo, Harabacka',
        },
    )
    roadAddress: Optional[StationRoadAddressV1] = None
    liviId: Optional[str] = Field(None, description='Id in road registry')
    country: Optional[str] = Field(None, description='Country where station is located')
    startTime: Optional[datetime] = Field(
        None, description='Station established date time'
    )
    repairMaintenanceTime: Optional[datetime] = Field(
        None, description='Repair maintenance date time'
    )
    annualMaintenanceTime: Optional[datetime] = Field(
        None, description='Annual maintenance date time'
    )
    purpose: Optional[str] = Field(None, description='Purpose of the road station')
    municipality: Optional[str] = Field(None, description='Municipality')
    municipalityCode: Optional[int] = Field(None, description='Municipality code')
    province: Optional[str] = Field(None, description='Province')
    provinceCode: Optional[int] = Field(None, description='Province code')
    stationType: Optional[StationType] = Field(
        None, description='Type of weather station'
    )
    master: bool = Field(..., description='Is station master or slave station')
    sensors: Optional[List[int]] = Field(
        None, description='Weather station sensors ids'
    )


class SensorValueDtoV1(BaseModel):
    id: int = Field(..., description='Sensor type id (naturalId)')
    stationId: int = Field(..., description='Id of the road station')
    name: str = Field(..., description='Sensor name')
    shortName: str = Field(..., description='Sensor short name')
    timeWindowStart: Optional[datetime] = Field(
        None,
        description='Measurement time window start time (only for fixed time window sensors)',
    )
    timeWindowEnd: Optional[datetime] = Field(
        None,
        description='Measurement time window end time (only for fixed time window sensors)',
    )
    measuredTime: datetime = Field(..., description='Measurement time')
    value: float = Field(..., description='Measured sensor value')
    reliability: Optional[Reliability] = Field(
        None, description='Measurement reliability information'
    )
    unit: str = Field(..., description='Measured sensor value unit')
    sensorValueDescriptionFi: Optional[str] = Field(
        None, description='Additional information of sensor value [fi]'
    )
    sensorValueDescriptionEn: Optional[str] = Field(
        None, description='Additional information of sensor value [en]'
    )


class WeatherStationDataDtoV1(BaseModel):
    id: int = Field(..., description='Id of the road station')
    dataUpdatedTime: Optional[datetime] = Field(
        None, description='Time when data was last updated'
    )
    sensorValues: List[SensorValueDtoV1] = Field(
        ..., description='Measured sensor values of the station'
    )


class WeatherStationsDataDtoV1(BaseModel):
    dataUpdatedTime: datetime = Field(
        ..., description='Time when data was last updated'
    )
    stations: Optional[List[WeatherStationDataDtoV1]] = Field(
        None, description='Stations data'
    )


class RoadStationSensorDirection(Enum):
    UNKNOWN = 'UNKNOWN'
    INCREASING_DIRECTION = 'INCREASING_DIRECTION'
    DECREASING_DIRECTION = 'DECREASING_DIRECTION'


class SensorValueDescription(BaseModel):
    descriptionEn: Optional[str] = Field(None, description='Sensor description [en]')
    descriptionFi: Optional[str] = Field(None, description='Sensor description [fi]')
    sensorValue: Optional[float] = Field(None, description='Sensor value')


class WeatherStationSensorDtoV1(BaseModel):
    id: int = Field(..., description='Sensor id')
    name: Optional[str] = Field(None, description='Sensor name [fi]')
    shortName: Optional[str] = Field(None, description='Short name for sensor [fi]')
    unit: Optional[str] = Field(None, description='Unit of sensor value')
    accuracy: Optional[int] = Field(None, description='Sensor accuracy')
    sensorValueDescriptions: Optional[List[SensorValueDescription]] = Field(
        None, description='Descriptions for sensor values'
    )
    presentationNames: Optional[Dict[str, str]] = Field(
        None, description='Map of presentation names [fi, sv, en]'
    )
    descriptions: Optional[Dict[str, str]] = Field(
        None, description='Map of sensor descriptions [fi, sv, en]'
    )
    direction: Optional[RoadStationSensorDirection] = None
    description: Optional[str] = Field(None, description='Sensor description [fi]')


class WeatherStationSensorsDtoV1(BaseModel):
    dataUpdatedTime: datetime = Field(..., description='Data last updated date time')
    dataLastCheckedTime: datetime = Field(
        ..., description='Data last checked date time'
    )
    sensors: List[WeatherStationSensorDtoV1] = Field(
        ..., description='Available sensors of road stations'
    )


class Type3(Enum):
    Point = 'Point'
    LineString = 'LineString'
    Polygon = 'Polygon'
    MultiPoint = 'MultiPoint'
    MultiLineString = 'MultiLineString'
    MultiPolygon = 'MultiPolygon'


class GeometryObject(BaseModel):
    type: Type3 = Field(..., description='GeoJson Geometry Object type')
    coordinates: List[Dict[str, Any]] = Field(
        ..., description='GeoJson Geometry Object coordinates'
    )


class Type4(Enum):
    LineString = 'LineString'


class LineString(GeometryObject):
    type: Type4 = Field(..., example='LineString')
    coordinates: List[List[float]] = Field(
        ...,
        description='An array of Point coordinates. Coordinates are in WGS84 format in decimal degrees: [LONGITUDE, LATITUDE, {ALTITUDE}]. Altitude is optional and measured in meters.',
        example=[[26.97677492, 65.3467385], [26.98433065, 65.35836767]],
    )


class Type5(Enum):
    MultiLineString = 'MultiLineString'


class MultiLineString(GeometryObject):
    type: Type5 = Field(..., example='MultiLineString')
    coordinates: List[List[List[float]]] = Field(
        ...,
        description='An array of LineString coordinates. Coordinates are in WGS84 format in decimal degrees: [LONGITUDE, LATITUDE, {ALTITUDE}]. Altitude is optional and measured in meters.',
        example=[[[100, 0], [101, 1]], [[102, 2], [103, 3]]],
    )


class Type6(Enum):
    MultiPoint = 'MultiPoint'


class MultiPoint(GeometryObject):
    type: Type6 = Field(..., example='MultiPoint')
    coordinates: List[List[float]] = Field(
        ...,
        description='An array of Point coordinates. Coordinates are in WGS84 format in decimal degrees: [LONGITUDE, LATITUDE, {ALTITUDE}]. Altitude is optional and measured in meters.',
        example=[[26.97677492, 65.3467385], [26.98433065, 65.35836767]],
    )


class Type7(Enum):
    MultiPolygon = 'MultiPolygon'


class MultiPolygon(GeometryObject):
    type: Type7 = Field(..., example='MultiPolygon')
    coordinates: List[List[List[List[float]]]] = Field(
        ...,
        description='An array of Polygon coordinates. Coordinates are in WGS84 format in decimal degrees: [LONGITUDE, LATITUDE, {ALTITUDE}]. Altitude is optional and measured in meters.',
        example=[
            [[[30, 20], [45, 40], [10, 40], [30, 20]]],
            [[[15, 5], [40, 10], [10, 20], [5, 10], [15, 5]]],
        ],
    )


class Type8(Enum):
    Polygon = 'Polygon'


class Polygon(GeometryObject):
    type: Type8 = Field(..., example='Polygon')
    coordinates: List[List[List[float]]] = Field(
        ...,
        description='An array of LinearRing coordinates. Coordinates are in WGS84 format in decimal degrees: [LONGITUDE, LATITUDE, {ALTITUDE}]. Altitude is optional and measured in meters.',
        example=[[[100, 0], [101, 1]], [[102, 2], [103, 3]]],
    )


class RoadSegmentDtoV1(BaseModel):
    startDistance: Optional[int] = Field(
        None, description='Road segment start distance'
    )
    endDistance: Optional[int] = Field(None, description='Road segment end distance')
    carriageway: Optional[int] = Field(None, description='Road segment carriageway')


class PrecipitationCondition(Enum):
    NO_DATA_AVAILABLE = 'NO_DATA_AVAILABLE'
    NO_RAIN_DRY_WEATHER = 'NO_RAIN_DRY_WEATHER'
    LIGHT_RAIN = 'LIGHT_RAIN'
    RAIN = 'RAIN'
    HEAVY_RAIN = 'HEAVY_RAIN'
    LIGHT_SNOWFALL = 'LIGHT_SNOWFALL'
    SNOWFALL = 'SNOWFALL'
    HEAVY_SNOWFALL = 'HEAVY_SNOWFALL'


class RoadCondition(Enum):
    DRY = 'DRY'
    MOIST = 'MOIST'
    WET = 'WET'
    SLUSH = 'SLUSH'
    FROST = 'FROST'
    PARTLY_ICY = 'PARTLY_ICY'
    ICE = 'ICE'
    SNOW = 'SNOW'


class WindCondition(Enum):
    WEAK = 'WEAK'
    MEDIUM = 'MEDIUM'
    STRONG = 'STRONG'


class VisibilityCondition(Enum):
    FAIRLY_POOR = 'FAIRLY_POOR'
    POOR = 'POOR'


class FrictionCondition(Enum):
    SLIPPERY = 'SLIPPERY'
    VERY_SLIPPERY = 'VERY_SLIPPERY'


class ForecastConditionReasonDtoV1(BaseModel):
    precipitationCondition: Optional[PrecipitationCondition] = Field(
        None,
        description='Precipitation condition:<br>\n0 = no data available,<br>\n1 = rain intensity lt 0.2 mm/h,<br>\n2 = rain intensity ge 0.2 mm/h,<br>\n3 = rain intensity ge 2.5 mm/h,<br>\n4 = rain intensity ge 7.6 mm/h,<br>\n5 = snowing intensity ge 0.2 cm/h,<br>\n6 = snowing intensity ge 1 cm/h,<br>\n7 = snowing intensity ge 3 cm/h<br>\n(lt = lower than, ge = greater or equal)',
    )
    roadCondition: Optional[RoadCondition] = Field(
        None, description='The state of the road'
    )
    windCondition: Optional[WindCondition] = Field(
        None, description='The strength of wind'
    )
    freezingRainCondition: Optional[bool] = Field(
        None, description='Tells if there is freezing rain: true/false'
    )
    winterSlipperiness: Optional[bool] = Field(
        None, description='Tells if it is slippery: true/false'
    )
    visibilityCondition: Optional[VisibilityCondition] = Field(
        None, description='Visibility'
    )
    frictionCondition: Optional[FrictionCondition] = Field(
        None, description='The amount of friction on the road'
    )


class Type9(Enum):
    OBSERVATION = 'OBSERVATION'
    FORECAST = 'FORECAST'


class OverallRoadCondition(Enum):
    NORMAL_CONDITION = 'NORMAL_CONDITION'
    POOR_CONDITION = 'POOR_CONDITION'
    EXTREMELY_POOR_CONDITION = 'EXTREMELY_POOR_CONDITION'
    CONDITION_COULD_NOT_BE_RESOLVED = 'CONDITION_COULD_NOT_BE_RESOLVED'


class Reliability2(Enum):
    SUCCESSFUL = 'SUCCESSFUL'
    NO_DATA_FROM_ROADSTATION = 'NO_DATA_FROM_ROADSTATION'
    FAILED = 'FAILED'


class ForecastSectionWeatherForecastDtoV1(BaseModel):
    time: Optional[datetime] = Field(
        None, description='Observation or forecast time depending on type'
    )
    type: Optional[Type9] = Field(
        None,
        description='Tells if object is an observation or a forecast. (OBSERVATION, FORECAST)',
    )
    forecastName: Optional[str] = Field(None, description='Name of the forecast')
    daylight: Optional[bool] = Field(
        None, description='Tells if there is daylight: true/false'
    )
    roadTemperature: Optional[float] = Field(
        None,
        description='Road temperature at given time. If not available value is not set',
    )
    temperature: Optional[float] = Field(None, description='Air temperature')
    windSpeed: Optional[float] = Field(None, description='Wind speed in m/s')
    windDirection: Optional[int] = Field(
        None,
        description='Wind direction in degrees. 0 when there is no wind or the direction is variable. 90 degrees is arrow to the east (count clockwise)',
    )
    overallRoadCondition: Optional[OverallRoadCondition] = Field(
        None, description='Overall road condition'
    )
    weatherSymbol: Optional[str] = Field(
        None,
        description="Weather symbol code. See corresponding symbols at https://www.vaisala.com/en/vaisala-weather-symbols. Symbols are allowed to be used in user's applications but any further modification and redistribution is denied.",
    )
    reliability: Optional[Reliability2] = Field(
        None, description='Forecast reliability'
    )
    forecastConditionReason: Optional[ForecastConditionReasonDtoV1] = None
    dataUpdatedTime: datetime = Field(..., description='Data last updated time')


class ForecastSectionPropertiesSimpleV1(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Forecast section identifier 15 characters ie. 00004_112_000_0: \n1. Road number 5 characters ie. 00004, \n2. Road section 3 characters ie. 112, \n3. Road section version 3 characters ie. 000, \n4. Reserved for future needs 1 characters default 0',
    )
    description: Optional[str] = Field(None, description='Forecast section description')
    roadSectionNumber: Optional[int] = Field(None, description='Road section number')
    roadNumber: Optional[int] = Field(None, description='Forecast section road number')
    roadSectionVersionNumber: Optional[int] = Field(
        None, description='Road section version number'
    )
    dataUpdatedTime: datetime = Field(..., description='Data last updated date time')


class SignTextRowV1(BaseModel):
    screen: Optional[int] = Field(None, description='Screen number')
    rowNumber: Optional[int] = Field(None, description='Row number')
    text: Optional[str] = Field(None, description='Text on a row')


class Type10(Enum):
    SPEEDLIMIT = 'SPEEDLIMIT'
    WARNING = 'WARNING'
    INFORMATION = 'INFORMATION'


class Direction(Enum):
    INCREASING = 'INCREASING'
    DECREASING = 'DECREASING'


class Carriageway1(Enum):
    SINGLE = 'SINGLE'
    RIGHT = 'RIGHT'
    LEFT = 'LEFT'
    BETWEEN = 'BETWEEN'
    END_OF_ROAD = 'END_OF_ROAD'
    ALONG = 'ALONG'
    ACROSS = 'ACROSS'


class Reliability3(Enum):
    NORMAL = 'NORMAL'
    DISCONNECTED = 'DISCONNECTED'
    MALFUNCTION = 'MALFUNCTION'


class VariableSignPropertiesV1(BaseModel):
    id: Optional[str] = Field(None, description='Id')
    type: Optional[Type10] = Field(None, description='Type')
    roadAddress: Optional[str] = Field(
        None, description='Sign location as road address'
    )
    direction: Optional[Direction] = Field(
        None,
        description='Direction of variable sign, increasing or decreasing road address',
    )
    carriageway: Optional[Carriageway1] = Field(
        None,
        description='Variable sign placement:\nSINGLE = Single carriageway rod\nRIGHT = First carriageway on the right in the direction of the road number\nLEFT = Second carriageway on the left in the direction of the road number\nBETWEEN = Between the carriageways',
    )
    displayValue: Optional[str] = Field(
        None, description='Value that is displayed on the device'
    )
    additionalInformation: Optional[str] = Field(
        None, description='Additional information displayed on the device'
    )
    effectDate: Optional[datetime] = Field(
        None, description='Information is effect after this date'
    )
    cause: Optional[str] = Field(
        None,
        description='Cause for changing the sign:\nAutomaatti = Automatic\nKäsiohjaus = By hand',
    )
    reliability: Optional[Reliability3] = Field(
        None, description='Variable sign reliability'
    )
    textRows: Optional[List[SignTextRowV1]] = Field(
        None, description='Text rows if sign contains a screen'
    )


class HistoryTextRowV1(BaseModel):
    text: Optional[str] = None
    screen: Optional[int] = None
    rowNumber: Optional[int] = None


class TrafficSignHistoryV1(BaseModel):
    cause: Optional[str] = None
    rows: Optional[List[HistoryTextRowV1]] = None
    displayValue: Optional[str] = None
    additionalInformation: Optional[str] = None
    effectDate: Optional[datetime] = None


class CodeDescription(BaseModel):
    description: str = Field(..., description='Description of the code (Finnish)')
    descriptionEn: str = Field(..., description='Description of the code(English')
    code: str = Field(..., description='Code')


class VariableSignDescriptions(BaseModel):
    signTypes: Optional[List[CodeDescription]] = None
    dataUpdatedTime: datetime = Field(..., description='Data last updated time')


class SituationTypeV1(Enum):
    TRAFFIC_ANNOUNCEMENT = 'TRAFFIC_ANNOUNCEMENT'
    EXEMPTED_TRANSPORT = 'EXEMPTED_TRANSPORT'
    WEIGHT_RESTRICTION = 'WEIGHT_RESTRICTION'
    ROAD_WORK = 'ROAD_WORK'


class AlertCLocationV1(BaseModel):
    locationCode: int = Field(
        ...,
        description='AlertC location code. Number of the location point in AlertC location table',
    )
    name: str = Field(..., description='Location point name')
    distance: Optional[int] = Field(
        None, description='Distance of the road point from the AlertC location point'
    )


class AreaTypeV1(Enum):
    MUNICIPALITY = 'MUNICIPALITY'
    PROVINCE = 'PROVINCE'
    REGIONAL_STATE_ADMINISTRATIVE_AGENCY = 'REGIONAL_STATE_ADMINISTRATIVE_AGENCY'
    WEATHER_REGION = 'WEATHER_REGION'
    COUNTRY = 'COUNTRY'
    CITY_REGION = 'CITY_REGION'
    TRAVEL_REGION = 'TRAVEL_REGION'
    UNKNOWN = 'UNKNOWN'


class AreaV1(BaseModel):
    name: str = Field(..., description='The name of the area')
    locationCode: int = Field(
        ...,
        description='Location code of the area, number of the road point in AlertC location table',
    )
    type: AreaTypeV1


class ContactV1(BaseModel):
    phone: Optional[str] = Field(None, description='Phone number')
    email: Optional[str] = Field(None, description='Email')


class EstimatedDurationV1(BaseModel):
    minimum: constr(
        regex=r'([-+]?)P(?:([-+]?[0-9]+)Y)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)W)?(?:([-+]?[0-9]+)D)?(T(?:([-+]?[0-9]+)H)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)(?:[.,]([0-9]{0,9}))?S)?)?'
    ) = Field(
        ...,
        description='Estimated minimum duration using ISO-8601 duration',
        example='PT6H',
    )
    maximum: Optional[
        constr(
            regex=r'([-+]?)P(?:([-+]?[0-9]+)Y)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)W)?(?:([-+]?[0-9]+)D)?(T(?:([-+]?[0-9]+)H)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)(?:[.,]([0-9]{0,9}))?S)?)?'
        )
    ] = Field(
        None,
        description='Estimated maximum duration using ISO-8601 duration',
        example='PT8H',
    )
    informal: str = Field(..., description='Informal description e.g. 1 - 3 hours')


class ItineraryRoadLegV1(BaseModel):
    roadNumber: Optional[int] = Field(None, description='Number of the road.')
    roadName: Optional[str] = Field(None, description='Name of the road.')
    startArea: Optional[str] = Field(
        None, description='Description of the place on the road, where this leg starts.'
    )
    endArea: Optional[str] = Field(
        None, description='Description of the place on the road, where this leg ends.'
    )


class LocalTime(BaseModel):
    hour: Optional[int] = None
    minute: Optional[int] = None
    second: Optional[int] = None
    nano: Optional[int] = None


class LocationV1(BaseModel):
    countryCode: int = Field(
        ..., description='AlertC country code defined by RDS (IEC 62106)'
    )
    locationTableNumber: int = Field(
        ...,
        description='AlertC location table number. Country code + location table number fully identifies the table.',
    )
    locationTableVersion: str = Field(
        ..., description='AlertC location table version number'
    )
    description: str = Field(..., description='Textual representation of the location')


class Type11(Enum):
    SPEED_LIMIT = 'SPEED_LIMIT'
    SPEED_LIMIT_LENGTH = 'SPEED_LIMIT_LENGTH'
    TRAFFIC_LIGHTS = 'TRAFFIC_LIGHTS'
    MULTIPLE_LANES_CLOSED = 'MULTIPLE_LANES_CLOSED'
    SINGLE_LANE_CLOSED = 'SINGLE_LANE_CLOSED'
    SINGLE_CARRIAGEWAY_CLOSED = 'SINGLE_CARRIAGEWAY_CLOSED'
    ROAD_CLOSED = 'ROAD_CLOSED'
    SINGLE_ALTERNATE_LINE_TRAFFIC = 'SINGLE_ALTERNATE_LINE_TRAFFIC'
    CONTRA_FLOW_TRAFFIC = 'CONTRA_FLOW_TRAFFIC'
    INTERMITTENT_SHORT_TERM_STOPS = 'INTERMITTENT_SHORT_TERM_STOPS'
    INTERMITTENT_SHORT_TERM_CLOSURE = 'INTERMITTENT_SHORT_TERM_CLOSURE'
    INTERMITTENT_STOPS_AND_CLOSURE_EFFECTIVE = (
        'INTERMITTENT_STOPS_AND_CLOSURE_EFFECTIVE'
    )
    NARROW_LANES = 'NARROW_LANES'
    DETOUR = 'DETOUR'
    DETOUR_SIGNS = 'DETOUR_SIGNS'
    DETOUR_CURVES_STEEP = 'DETOUR_CURVES_STEEP'
    DETOUR_CURVES_GENTLE = 'DETOUR_CURVES_GENTLE'
    DETOUR_USING_ROADWAYS = 'DETOUR_USING_ROADWAYS'
    DETOUR_SURFACE_PAVED = 'DETOUR_SURFACE_PAVED'
    DETOUR_SURFACE_MILLED = 'DETOUR_SURFACE_MILLED'
    DETOUR_SURFACE_GRAVEL = 'DETOUR_SURFACE_GRAVEL'
    DETOUR_LENGTH = 'DETOUR_LENGTH'
    DETOUR_GROSS_WEIGHT_LIMIT = 'DETOUR_GROSS_WEIGHT_LIMIT'
    SLOW_MOVING_MAINTENANCE_VEHICLE = 'SLOW_MOVING_MAINTENANCE_VEHICLE'
    ESTIMATED_DELAY = 'ESTIMATED_DELAY'
    ESTIMATED_DELAY_DURING_RUSH_HOUR = 'ESTIMATED_DELAY_DURING_RUSH_HOUR'
    NARROW_OR_CLOSED_PEDESTRIAN_AND_BICYLE_PATH = (
        'NARROW_OR_CLOSED_PEDESTRIAN_AND_BICYLE_PATH'
    )
    VEHICLE_HEIGHT_LIMIT = 'VEHICLE_HEIGHT_LIMIT'
    VEHICLE_WIDTH_LIMIT = 'VEHICLE_WIDTH_LIMIT'
    VEHICLE_LENGTH_LIMIT = 'VEHICLE_LENGTH_LIMIT'
    VEHICLE_GROSS_WEIGHT_LIMIT = 'VEHICLE_GROSS_WEIGHT_LIMIT'
    ROAD_SURFACE_PAVED = 'ROAD_SURFACE_PAVED'
    ROAD_SURFACE_MILLED = 'ROAD_SURFACE_MILLED'
    ROAD_SURFACE_GRAVEL = 'ROAD_SURFACE_GRAVEL'
    OPEN_FIRE_HEATER_IN_USE = 'OPEN_FIRE_HEATER_IN_USE'


class Direction1(Enum):
    UNKNOWN = 'UNKNOWN'
    POS = 'POS'
    NEG = 'NEG'
    BOTH = 'BOTH'


class Severity(Enum):
    LOW = 'LOW'
    HIGH = 'HIGH'
    HIGHEST = 'HIGHEST'


class TimeAndDurationV1(BaseModel):
    startTime: datetime = Field(..., description='Start time of the situation')
    endTime: Optional[datetime] = Field(
        None,
        description='End time of the situation. If the end time has been passed, the situation can be assumed to be over. If end time is not given, there will be follow-up announcement about the situation.',
    )
    estimatedDuration: Optional[EstimatedDurationV1] = None


class TrafficAnnouncementType(Enum):
    GENERAL = 'GENERAL'
    PRELIMINARY_ACCIDENT_REPORT = 'PRELIMINARY_ACCIDENT_REPORT'
    ACCIDENT_REPORT = 'ACCIDENT_REPORT'
    UNCONFIRMED_OBSERVATION = 'UNCONFIRMED_OBSERVATION'
    ENDED = 'ENDED'
    RETRACTED = 'RETRACTED'


class Language(Enum):
    FI = 'FI'


class EarlyClosing(Enum):
    CLOSED = 'CLOSED'
    CANCELED = 'CANCELED'


class TrafficMessageRoadAddressV1(BaseModel):
    road: int = Field(..., description='Number of the road')
    roadSection: int = Field(..., description='Number of the road section')
    distance: int = Field(
        ..., description='Distance from the beginning of the road section.'
    )


class Weekday(Enum):
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'
    SUNDAY = 'SUNDAY'


class WeekdayTimePeriodV1(BaseModel):
    weekday: Weekday = Field(..., description='Weekday')
    startTime: LocalTime
    endTime: LocalTime


class Type12(Enum):
    BRIDGE = 'BRIDGE'
    JUNCTION = 'JUNCTION'
    CRASH_BARRIER = 'CRASH_BARRIER'
    BURIED_CABLES = 'BURIED_CABLES'
    LIGHTING = 'LIGHTING'
    ROADSIDE_EQUIPMENT = 'ROADSIDE_EQUIPMENT'
    MEASUREMENT_EQUIPMENT = 'MEASUREMENT_EQUIPMENT'
    LEVEL_CROSSING = 'LEVEL_CROSSING'
    BLASTING_WORK = 'BLASTING_WORK'
    ROAD_CONSTRUCTION = 'ROAD_CONSTRUCTION'
    STRUCTURAL_IMPROVEMENT = 'STRUCTURAL_IMPROVEMENT'
    UNDERPASS_CONSTRUCTION = 'UNDERPASS_CONSTRUCTION'
    PEDESTRIAN_AND_BICYCLE_PATH = 'PEDESTRIAN_AND_BICYCLE_PATH'
    STABILIZATION = 'STABILIZATION'
    RESURFACING = 'RESURFACING'
    ROAD_SURFACE_MARKING = 'ROAD_SURFACE_MARKING'
    FINISHING_WORK = 'FINISHING_WORK'
    MEASUREMENT = 'MEASUREMENT'
    TREE_AND_VEGETATION_CUTTING = 'TREE_AND_VEGETATION_CUTTING'
    GRASS_CUTTING = 'GRASS_CUTTING'
    MAINTENANCE = 'MAINTENANCE'
    CULVERT_REPLACEMENT = 'CULVERT_REPLACEMENT'
    OTHER = 'OTHER'


class WorkTypeV1(BaseModel):
    type: Type12 = Field(..., description='Worktype')
    description: str = Field(..., description='Description')


class ChangedFlag(Enum):
    CATALOGUE = 'CATALOGUE'
    FILTER = 'FILTER'


class DenyReason(Enum):
    UNKNOWN_REASON = 'UNKNOWN_REASON'
    WRONG_CATALOGUE = 'WRONG_CATALOGUE'
    WRONG_FILTER = 'WRONG_FILTER'
    WRONG_ORDER = 'WRONG_ORDER'
    WRONG_PARTNER = 'WRONG_PARTNER'


class RequestType(Enum):
    CATALOGUE = 'CATALOGUE'
    FILTER = 'FILTER'
    REQUEST_DATA = 'REQUEST_DATA'
    REQUEST_HISTORICAL_DATA = 'REQUEST_HISTORICAL_DATA'
    SUBSCRIPTION = 'SUBSCRIPTION'


class Response(Enum):
    ACKNOWLEDGE = 'ACKNOWLEDGE'
    CATALOGUE_REQUEST_DENIED = 'CATALOGUE_REQUEST_DENIED'
    FILTER_REQUEST_DENIED = 'FILTER_REQUEST_DENIED'
    REQUEST_DENIED = 'REQUEST_DENIED'
    SUBSCRIPTION_REQUEST_DENIED = 'SUBSCRIPTION_REQUEST_DENIED'


class OperatingMode(Enum):
    OPERATING_MODE_0 = 'OPERATING_MODE_0'
    OPERATING_MODE_1 = 'OPERATING_MODE_1'
    OPERATING_MODE_2 = 'OPERATING_MODE_2'
    OPERATING_MODE_3 = 'OPERATING_MODE_3'


class SubscriptionState(Enum):
    ACTIVE = 'ACTIVE'
    SUSPENDED = 'SUSPENDED'


class UpdateMethod(Enum):
    ALL_ELEMENT_UPDATE = 'ALL_ELEMENT_UPDATE'
    SINGLE_ELEMENT_UPDATE = 'SINGLE_ELEMENT_UPDATE'
    SNAPSHOT = 'SNAPSHOT'


class LocationPropertiesV1(BaseModel):
    locationCode: int = Field(..., description='Unique locationCode for this location')
    subtypeCode: str = Field(..., description='Code of location subtype')
    roadJunction: Optional[str] = Field(
        None,
        description='Roadnumber for roads. Junctionno: the numbering of exits has only just begun on the very limited Finnish motorway network. The exit numbers will be included. NOTE: the roads, segments and points are not sorted in ascending order',
    )
    roadName: Optional[str] = Field(
        None, description='Roadname if exists, L5.0 always have road name'
    )
    firstName: str = Field(
        ...,
        description='For roads and segments this is the name of the starting point. For all other objects (linear (streets), area and point) this is the name of the object',
    )
    secondName: Optional[str] = Field(
        None,
        description='For roads and segments this is the name of the ending point. For point locations the number of the intersecting road',
    )
    areaRef: Optional[int] = Field(
        None, description='Code of the upper order administrative area'
    )
    linearRef: Optional[int] = Field(
        None,
        description='For segments and point locations. Describes the code of the segment which these objects belong to. If there are no segments on the road the location code of the road is given instead',
    )
    negOffset: Optional[int] = Field(
        None,
        description='For segments and point locations. Segments: describes the code of previous segment on that road. For the first segment on the road this code is 0. Points: describes the code of previous point on that road. For the starting point this code is 0',
    )
    posOffset: Optional[int] = Field(
        None,
        description='For segments and point locations. Segments: describes the code of next segment on that road. For the last segment on the road this code is 0. Points: describes the code of next point on that road. For the last point this code is 0',
    )
    urban: Optional[bool] = Field(
        None,
        description='Indicates whether a point is within the city limits (1) or not (0). NOTE: Not actively entered yet',
    )
    coordinatesETRS89: Optional[List[float]] = Field(
        None,
        description='Point coordinates (LONGITUDE, LATITUDE). Coordinates are in ETRS89 / ETRS-TM35FIN format.',
    )
    negDirection: Optional[str] = Field(
        None,
        description='For all L5.0 and for some roads. Text to be used when the incident has an effect only on vehicles driving in the negative direction of the road. ( e.g. Ring 1 westbound)',
    )
    posDirection: Optional[str] = Field(
        None,
        description='For all L5.0 and for some roads. Text to be used when the incident has an effect only on vehicles driving in the positive direction of the road. ( e.g. Ring 1 eastbound)',
    )
    geocode: Optional[str] = Field(
        None,
        description='Point location according to Finnish Transport Agency’s official addressing where Locations on road network are addressed as: Road number;Road part number;Carriageway; Distance from the beginning of the road part',
    )
    orderOfPoint: Optional[str] = Field(
        None, description='The order of point within line or segment feature'
    )
    dataUpdatedTime: datetime = Field(..., description='Data last updated time')
    locationVersion: Optional[str] = Field(None, description='Location version')


class LocationVersionDtoV1(BaseModel):
    version: str = Field(..., description='Location version string')
    dataUpdatedTime: datetime = Field(..., description='Data last updated time')


class LocationSubtypeDtoV1(BaseModel):
    subtypeCode: str = Field(..., description='Code of location subtype')
    descriptionFi: str = Field(..., description='Description of subtype in finnish')
    descriptionEn: str = Field(..., description='Description of subtype in english')


class LocationTypeDtoV1(BaseModel):
    typeCode: str = Field(..., description='Code of location type')
    descriptionFi: str = Field(..., description='Description of type in finnish')
    descriptionEn: str = Field(..., description='Description of type in english')


class LocationTypesDtoV1(BaseModel):
    dataUpdatedTime: datetime = Field(..., description='Data last updated time')
    version: str = Field(..., description='Version of TMS/Alert-C material')
    locationTypes: List[LocationTypeDtoV1] = Field(..., description='Location types')
    locationSubtypes: List[LocationSubtypeDtoV1] = Field(
        ..., description='Location subtypes'
    )


class RegionGeometryPropertiesV1(BaseModel):
    locationCode: int = Field(..., description='The Alert-C code of the region')
    name: str = Field(..., description='The name of the region')
    type: AreaTypeV1
    effectiveDate: datetime = Field(
        ..., description='The moment, when the data comes into effect'
    )


class TmsStationPropertiesSimpleV1(BaseModel):
    id: int = Field(..., description='Id of the road station')
    tmsNumber: int = Field(
        ..., description='TMS station number (naturalId) for legacy support'
    )
    name: Optional[str] = Field(None, description='Common name of road station')
    collectionStatus: Optional[CollectionStatus] = Field(
        None, description='Data collection status'
    )
    state: Optional[State] = Field(None, description='Road station state')
    dataUpdatedTime: Optional[datetime] = Field(
        None, description='Data last updated date time'
    )


class StationType1(Enum):
    DSL_4 = 'DSL_4'
    DSL_6 = 'DSL_6'
    E_18 = 'E_18'
    LML_1 = 'LML_1'
    OLD = 'OLD'
    DSL = 'DSL'
    FINAVIA = 'FINAVIA'


class CalculatorDeviceType(Enum):
    DSL_3 = 'DSL_3'
    DSL_4_L = 'DSL_4_L'
    DSL_4_G = 'DSL_4_G'
    DSL_5 = 'DSL_5'
    OTHER = 'OTHER'


class TmsStationPropertiesDetailedV1(BaseModel):
    id: int = Field(..., description='Id of the road station')
    tmsNumber: int = Field(..., description='TMS station number')
    name: Optional[str] = Field(None, description='Common name of road station')
    collectionStatus: Optional[CollectionStatus] = Field(
        None, description='Data collection status'
    )
    state: Optional[State] = Field(None, description='Road station state')
    dataUpdatedTime: Optional[datetime] = Field(
        None, description='Data last updated date time'
    )
    collectionInterval: Optional[int] = Field(
        None, description='Data collection interval [s]'
    )
    names: Optional[Dict[str, str]] = Field(
        None,
        description='Map of names [fi, sv, en]',
        example={
            'fi': 'Tie 7 Porvoo, Harabacka',
            'sv': 'Väg 7 Borgå, Harabacka',
            'en': 'Road 7 Porvoo, Harabacka',
        },
    )
    roadAddress: Optional[StationRoadAddressV1] = None
    liviId: Optional[str] = Field(None, description='Id in road registry')
    country: Optional[str] = Field(None, description='Country where station is located')
    startTime: Optional[datetime] = Field(
        None, description='Station established date time'
    )
    repairMaintenanceTime: Optional[datetime] = Field(
        None, description='Repair maintenance date time'
    )
    annualMaintenanceTime: Optional[datetime] = Field(
        None, description='Annual maintenance date time'
    )
    purpose: Optional[str] = Field(None, description='Purpose of the road station')
    municipality: Optional[str] = Field(None, description='Municipality')
    municipalityCode: Optional[int] = Field(None, description='Municipality code')
    province: Optional[str] = Field(None, description='Province')
    provinceCode: Optional[int] = Field(None, description='Province code')
    direction1Municipality: str = Field(
        ...,
        description='Direction 1 municipality (1 = According to the road register address increasing direction. I.e. on the road 4 to Lahti, if we are in Korso.)',
    )
    direction1MunicipalityCode: Optional[int] = Field(
        None, description='Direction 1 municipality code'
    )
    direction2Municipality: str = Field(
        ...,
        description='Direction 2 municipality (2 = According to the road register address decreasing direction. I.e. on the road 4 to Helsinki, if we are in Korso.)',
    )
    direction2MunicipalityCode: Optional[int] = Field(
        None, description='Direction 2 municipality code'
    )
    stationType: Optional[StationType1] = Field(None, description='TMS station type')
    calculatorDeviceType: Optional[CalculatorDeviceType] = Field(
        None, description='Type of calculation device'
    )
    sensors: Optional[List[int]] = Field(None, description='Tms Station Sensors ids')
    freeFlowSpeed1: Optional[float] = Field(
        None, description='Free flow speed to direction 1 [km/h]'
    )
    freeFlowSpeed2: Optional[float] = Field(
        None, description='Free flow speed to direction 2 [km/h]'
    )


class TmsSensorConstantValueDtoV1(BaseModel):
    name: str = Field(..., description='Name of the sensor constant')
    value: int = Field(..., description='Value of the sensor constant')
    validFrom: str = Field(
        ...,
        description='Validity start in format mm-dd ie. value 01-31 is 31th of January',
    )
    validTo: str = Field(
        ...,
        description='Validity end in format mm-dd ie. value 01-31 is 31th of January',
    )


class TmsStationSensorConstantDtoV1(BaseModel):
    id: int = Field(..., description='Id of the road station')
    dataUpdatedTime: Optional[datetime] = Field(
        None, description='Time when data was last updated'
    )
    sensorConstantValues: List[TmsSensorConstantValueDtoV1] = Field(
        ..., description='TMS Stations sensor constant values'
    )


class TmsStationDataDtoV1(BaseModel):
    id: int = Field(..., description='Id of the road station')
    tmsNumber: int = Field(..., description='TMS station number')
    dataUpdatedTime: Optional[datetime] = Field(
        None, description='Time when data was last updated'
    )
    sensorValues: List[SensorValueDtoV1] = Field(
        ..., description='Measured sensor values of the station'
    )


class TmsStationsSensorConstantsDataDtoV1(BaseModel):
    dataUpdatedTime: datetime = Field(
        ..., description='Time when data was last updated'
    )
    stations: Optional[List[TmsStationSensorConstantDtoV1]] = Field(
        None, description='Stations data'
    )


class TmsStationsDataDtoV1(BaseModel):
    dataUpdatedTime: datetime = Field(
        ..., description='Time when data was last updated'
    )
    stations: Optional[List[TmsStationDataDtoV1]] = Field(
        None, description='Stations data'
    )


class TmsStationSensorDtoV1(BaseModel):
    id: int = Field(..., description='Sensor id')
    name: Optional[str] = Field(None, description='Sensor name [fi]')
    shortName: Optional[str] = Field(None, description='Short name for sensor [fi]')
    unit: Optional[str] = Field(None, description='Unit of sensor value')
    accuracy: Optional[int] = Field(None, description='Sensor accuracy')
    sensorValueDescriptions: Optional[List[SensorValueDescription]] = Field(
        None, description='Descriptions for sensor values'
    )
    presentationNames: Optional[Dict[str, str]] = Field(
        None, description='Map of presentation names [fi, sv, en]'
    )
    descriptions: Optional[Dict[str, str]] = Field(
        None, description='Map of sensor descriptions [fi, sv, en]'
    )
    direction: Optional[RoadStationSensorDirection] = None
    description: Optional[str] = Field(None, description='Sensor description [fi]')


class TmsStationSensorsDtoV1(BaseModel):
    dataUpdatedTime: datetime = Field(..., description='Data last updated date time')
    dataLastCheckedTime: datetime = Field(
        ..., description='Data last checked date time'
    )
    sensors: List[TmsStationSensorDtoV1] = Field(
        ..., description='Available sensors of road stations'
    )


class MaintenanceTrackingTaskDtoV1(BaseModel):
    id: Optional[str] = None
    nameFi: Optional[str] = None
    nameEn: Optional[str] = None
    nameSv: Optional[str] = None
    dataUpdatedTime: datetime = Field(..., description='Data last updated time')


class Type13(Enum):
    Feature = 'Feature'


class Task(Enum):
    BRUSHING = 'BRUSHING'
    BRUSH_CLEARING = 'BRUSH_CLEARING'
    CLEANSING_OF_BRIDGES = 'CLEANSING_OF_BRIDGES'
    CLEANSING_OF_REST_AREAS = 'CLEANSING_OF_REST_AREAS'
    CLEANSING_OF_TRAFFIC_SIGNS = 'CLEANSING_OF_TRAFFIC_SIGNS'
    CLIENTS_QUALITY_CONTROL = 'CLIENTS_QUALITY_CONTROL'
    COMPACTION_BY_ROLLING = 'COMPACTION_BY_ROLLING'
    CRACK_FILLING = 'CRACK_FILLING'
    DITCHING = 'DITCHING'
    DUST_BINDING_OF_GRAVEL_ROAD_SURFACE = 'DUST_BINDING_OF_GRAVEL_ROAD_SURFACE'
    FILLING_OF_GRAVEL_ROAD_SHOULDERS = 'FILLING_OF_GRAVEL_ROAD_SHOULDERS'
    FILLING_OF_ROAD_SHOULDERS = 'FILLING_OF_ROAD_SHOULDERS'
    HEATING = 'HEATING'
    LEVELLING_GRAVEL_ROAD_SURFACE = 'LEVELLING_GRAVEL_ROAD_SURFACE'
    LEVELLING_OF_ROAD_SHOULDERS = 'LEVELLING_OF_ROAD_SHOULDERS'
    LEVELLING_OF_ROAD_SURFACE = 'LEVELLING_OF_ROAD_SURFACE'
    LINE_SANDING = 'LINE_SANDING'
    LOWERING_OF_SNOWBANKS = 'LOWERING_OF_SNOWBANKS'
    MAINTENANCE_OF_GUIDE_SIGNS_AND_REFLECTOR_POSTS = (
        'MAINTENANCE_OF_GUIDE_SIGNS_AND_REFLECTOR_POSTS'
    )
    MECHANICAL_CUT = 'MECHANICAL_CUT'
    MIXING_OR_STABILIZATION = 'MIXING_OR_STABILIZATION'
    OTHER = 'OTHER'
    PATCHING = 'PATCHING'
    PAVING = 'PAVING'
    PLOUGHING_AND_SLUSH_REMOVAL = 'PLOUGHING_AND_SLUSH_REMOVAL'
    PREVENTING_MELTING_WATER_PROBLEMS = 'PREVENTING_MELTING_WATER_PROBLEMS'
    REMOVAL_OF_BULGE_ICE = 'REMOVAL_OF_BULGE_ICE'
    RESHAPING_GRAVEL_ROAD_SURFACE = 'RESHAPING_GRAVEL_ROAD_SURFACE'
    ROAD_INSPECTIONS = 'ROAD_INSPECTIONS'
    ROAD_MARKINGS = 'ROAD_MARKINGS'
    ROAD_STATE_CHECKING = 'ROAD_STATE_CHECKING'
    SAFETY_EQUIPMENT = 'SAFETY_EQUIPMENT'
    SALTING = 'SALTING'
    SNOW_PLOUGHING_STICKS_AND_SNOW_FENCES = 'SNOW_PLOUGHING_STICKS_AND_SNOW_FENCES'
    SPOT_SANDING = 'SPOT_SANDING'
    SPREADING_OF_CRUSH = 'SPREADING_OF_CRUSH'
    TRANSFER_OF_SNOW = 'TRANSFER_OF_SNOW'
    SERVICE_ROUND = 'SERVICE_ROUND'
    ENSURING_TRAFFIC_IN_RASPUTITSA = 'ENSURING_TRAFFIC_IN_RASPUTITSA'
    OTHER_OPERATIONS_OF_LIGHTING_CONTRACTS = 'OTHER_OPERATIONS_OF_LIGHTING_CONTRACTS'
    LEVELLING_OF_ROAD_SHOULDERS_UNDER_RAILING = (
        'LEVELLING_OF_ROAD_SHOULDERS_UNDER_RAILING'
    )
    DUST_BINDING_OF_PAVED_ROAD_SURFACE = 'DUST_BINDING_OF_PAVED_ROAD_SURFACE'
    RENEWAL_OF_EDGE_COLUMNS = 'RENEWAL_OF_EDGE_COLUMNS'
    GARBAGE_OLLECTION = 'GARBAGE_OLLECTION'
    GROUP_REPLACEMENT_OF_LAMPS = 'GROUP_REPLACEMENT_OF_LAMPS'
    PLOUGHING_OF_SLUSH_DITCH = 'PLOUGHING_OF_SLUSH_DITCH'
    UNKNOWN = 'UNKNOWN'


class MaintenanceTrackingPropertiesV1(BaseModel):
    id: int = Field(..., description='Id for the tracking')
    previousId: Optional[int] = Field(
        None, description='Id for the previous tracking if known'
    )
    sendingTime: datetime = Field(..., description='Time when tracking was reported')
    created: datetime = Field(..., description='Creation time of tracking')
    tasks: List[Task] = Field(
        ..., description='Tasks done during maintenance work', unique_items=True
    )
    startTime: datetime = Field(..., description='Start time of maintenance work tasks')
    endTime: datetime = Field(..., description='End time of maintenance work tasks')
    direction: Optional[float] = Field(
        None, description='Direction of the last observation'
    )
    domain: Optional[str] = Field(None, description='Domain of the data')
    source: Optional[str] = Field(None, description='Source and owner of the data')


class MaintenanceTrackingLatestPropertiesV1(BaseModel):
    id: int = Field(..., description='Id for the tracking')
    time: datetime = Field(..., description='Time of latest tracking')
    created: datetime = Field(..., description='Creation time of tracking')
    tasks: List[Task] = Field(
        ..., description='Tasks done during maintenance work', unique_items=True
    )
    direction: Optional[float] = Field(
        None, description='Direction of the last observation'
    )
    domain: Optional[str] = Field(None, description='Domain of the data')
    source: Optional[str] = Field(None, description='Source and owner of the data')


class MaintenanceTrackingDomainDtoV1(BaseModel):
    name: str = Field(..., description='Name of the maintenance tracking domain')
    source: str = Field(..., description='Source and owner of the data')
    dataUpdatedTime: datetime = Field(..., description='Data last updated time')


class UpdateInfoDtoV1(BaseModel):
    api: str = Field(..., description='Url of the API')
    subtype: Optional[str] = Field(
        None, description='More specific info about API. Ie. domain info.'
    )
    dataUpdatedTime: datetime = Field(..., description='Data last updated time')
    dataCheckedTime: Optional[datetime] = Field(
        None,
        description='Latest check for data updates.  <br>\n`null` value indicates data being pushed to our platform or static data that is only updated when needed.',
    )
    dataUpdateInterval: Optional[str] = Field(
        None,
        description='Data update interval in ISO-8601 duration format `PnDTnHnMn.nS`. <br>\n`P0S` means that data is updated in nearly real time. <br>\n`null` means that data is static and updated only when needed.',
        example='[PT5M, P1H]',
    )
    recommendedFetchInterval: str = Field(
        ...,
        description='Recommended fetch interval for clients in ISO-8601 duration format `PnDTnHnMn.nS`',
        example='[PT5M, P1H]',
    )


class UpdateInfosDtoV1(BaseModel):
    dataUpdatedTime: datetime = Field(..., description='Data last updated time')
    updateTimes: Optional[List[UpdateInfoDtoV1]] = Field(
        None, description='Update times for APIs'
    )


class TaskIdEnum(Enum):
    BRUSHING = 'BRUSHING'
    BRUSH_CLEARING = 'BRUSH_CLEARING'
    CLEANSING_OF_BRIDGES = 'CLEANSING_OF_BRIDGES'
    CLEANSING_OF_REST_AREAS = 'CLEANSING_OF_REST_AREAS'
    CLEANSING_OF_TRAFFIC_SIGNS = 'CLEANSING_OF_TRAFFIC_SIGNS'
    CLIENTS_QUALITY_CONTROL = 'CLIENTS_QUALITY_CONTROL'
    COMPACTION_BY_ROLLING = 'COMPACTION_BY_ROLLING'
    CRACK_FILLING = 'CRACK_FILLING'
    DITCHING = 'DITCHING'
    DUST_BINDING_OF_GRAVEL_ROAD_SURFACE = 'DUST_BINDING_OF_GRAVEL_ROAD_SURFACE'
    FILLING_OF_GRAVEL_ROAD_SHOULDERS = 'FILLING_OF_GRAVEL_ROAD_SHOULDERS'
    FILLING_OF_ROAD_SHOULDERS = 'FILLING_OF_ROAD_SHOULDERS'
    HEATING = 'HEATING'
    LEVELLING_GRAVEL_ROAD_SURFACE = 'LEVELLING_GRAVEL_ROAD_SURFACE'
    LEVELLING_OF_ROAD_SHOULDERS = 'LEVELLING_OF_ROAD_SHOULDERS'
    LEVELLING_OF_ROAD_SURFACE = 'LEVELLING_OF_ROAD_SURFACE'
    LINE_SANDING = 'LINE_SANDING'
    LOWERING_OF_SNOWBANKS = 'LOWERING_OF_SNOWBANKS'
    MAINTENANCE_OF_GUIDE_SIGNS_AND_REFLECTOR_POSTS = (
        'MAINTENANCE_OF_GUIDE_SIGNS_AND_REFLECTOR_POSTS'
    )
    MECHANICAL_CUT = 'MECHANICAL_CUT'
    MIXING_OR_STABILIZATION = 'MIXING_OR_STABILIZATION'
    OTHER = 'OTHER'
    PATCHING = 'PATCHING'
    PAVING = 'PAVING'
    PLOUGHING_AND_SLUSH_REMOVAL = 'PLOUGHING_AND_SLUSH_REMOVAL'
    PREVENTING_MELTING_WATER_PROBLEMS = 'PREVENTING_MELTING_WATER_PROBLEMS'
    REMOVAL_OF_BULGE_ICE = 'REMOVAL_OF_BULGE_ICE'
    RESHAPING_GRAVEL_ROAD_SURFACE = 'RESHAPING_GRAVEL_ROAD_SURFACE'
    ROAD_INSPECTIONS = 'ROAD_INSPECTIONS'
    ROAD_MARKINGS = 'ROAD_MARKINGS'
    ROAD_STATE_CHECKING = 'ROAD_STATE_CHECKING'
    SAFETY_EQUIPMENT = 'SAFETY_EQUIPMENT'
    SALTING = 'SALTING'
    SNOW_PLOUGHING_STICKS_AND_SNOW_FENCES = 'SNOW_PLOUGHING_STICKS_AND_SNOW_FENCES'
    SPOT_SANDING = 'SPOT_SANDING'
    SPREADING_OF_CRUSH = 'SPREADING_OF_CRUSH'
    TRANSFER_OF_SNOW = 'TRANSFER_OF_SNOW'
    SERVICE_ROUND = 'SERVICE_ROUND'
    ENSURING_TRAFFIC_IN_RASPUTITSA = 'ENSURING_TRAFFIC_IN_RASPUTITSA'
    OTHER_OPERATIONS_OF_LIGHTING_CONTRACTS = 'OTHER_OPERATIONS_OF_LIGHTING_CONTRACTS'
    LEVELLING_OF_ROAD_SHOULDERS_UNDER_RAILING = (
        'LEVELLING_OF_ROAD_SHOULDERS_UNDER_RAILING'
    )
    DUST_BINDING_OF_PAVED_ROAD_SURFACE = 'DUST_BINDING_OF_PAVED_ROAD_SURFACE'
    RENEWAL_OF_EDGE_COLUMNS = 'RENEWAL_OF_EDGE_COLUMNS'
    GARBAGE_OLLECTION = 'GARBAGE_OLLECTION'
    GROUP_REPLACEMENT_OF_LAMPS = 'GROUP_REPLACEMENT_OF_LAMPS'
    PLOUGHING_OF_SLUSH_DITCH = 'PLOUGHING_OF_SLUSH_DITCH'
    UNKNOWN = 'UNKNOWN'


class DOMConfiguration(BaseModel):
    parameterNames: Optional[DOMStringList] = None


class EmissionsExtension(BaseModel):
    comparisonOperator: FieldComparisonOperatorEnum


class MultilingualString(BaseModel):
    values: Values


class NamedArea(BaseModel):
    areaName: MultilingualString
    namedAreaType: Optional[NamedAreaTypeEnumG] = None
    country: Optional[str] = None
    namedAreaExtensionG: Optional[ExtensionTypeG] = None


class CounterFeatureModel(BaseModel):
    geometry: Dict[str, Any] = Field(..., description='GeoJSON geometry')
    type: Type1 = Field(..., description='Feature')
    properties: CounterModel


class Point(GeometryObject):
    type: Type2 = Field(..., example='Point')
    coordinates: List[float] = Field(
        ...,
        description='An array of coordinates. Coordinates are in WGS84 format in decimal degrees: [LONGITUDE, LATITUDE, {ALTITUDE}]. Altitude is optional and measured in meters.',
        example=[26.97677492, 65.3467385],
    )


class WeathercamStationFeatureSimpleV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    id: str = Field(..., description='Id of the road station')
    geometry: Point
    properties: WeathercamStationPropertiesSimpleV1


class WeathercamPresetDetailedV1(BaseModel):
    id: Optional[str] = Field(None, description='Id of preset')
    presentationName: Optional[str] = Field(
        None, description='PresentationName (Preset name 1, direction)'
    )
    inCollection: Optional[bool] = Field(None, description='Is preset in collection')
    resolution: Optional[str] = Field(
        None, description='Resolution of camera [px x px]'
    )
    directionCode: str = Field(
        ...,
        description='Preset direction:<br>\n0 = Unknown direction.<br>\n1 = According to the road register address increasing direction. I.e. on the road 4 to Lahti, if we are in Korso.<br>\n2 = According to the road register address decreasing direction. I.e. on the road 4 to Helsinki, if we are in Korso.<br>\n3 = Increasing direction of the crossing road.<br>\n4 = Decreasing direction of the crossing road.<br>\n5-99 = Special directions',
    )
    imageUrl: Optional[str] = Field(None, description='Image url')
    direction: WeathercamPresetDirectionV1


class WeathercamStationPropertiesDetailedV1(BaseModel):
    id: str = Field(..., description='Id of the road station')
    name: Optional[str] = Field(None, description='Common name of road station')
    cameraType: Optional[CameraType] = Field(None, description='Type of camera')
    nearestWeatherStationId: Optional[int] = Field(
        None, description='Nearest weather station id'
    )
    collectionStatus: Optional[CollectionStatus] = Field(
        None, description='Data collection status'
    )
    state: Optional[State] = Field(None, description='Road station state')
    dataUpdatedTime: Optional[datetime] = Field(
        None, description='Data last updated date time'
    )
    collectionInterval: Optional[int] = Field(
        None, description='Data collection interval [s]'
    )
    names: Optional[Dict[str, str]] = Field(
        None,
        description='Map of names [fi, sv, en]',
        example={
            'fi': 'Tie 7 Porvoo, Harabacka',
            'sv': 'Väg 7 Borgå, Harabacka',
            'en': 'Road 7 Porvoo, Harabacka',
        },
    )
    roadAddress: Optional[StationRoadAddressV1] = None
    liviId: Optional[str] = Field(None, description='Id in road registry')
    country: Optional[str] = Field(None, description='Country where station is located')
    startTime: Optional[datetime] = Field(
        None, description='Station established date time'
    )
    repairMaintenanceTime: Optional[datetime] = Field(
        None, description='Repair maintenance date time'
    )
    annualMaintenanceTime: Optional[datetime] = Field(
        None, description='Annual maintenance date time'
    )
    purpose: Optional[str] = Field(None, description='Purpose of the road station')
    municipality: Optional[str] = Field(None, description='Municipality')
    municipalityCode: Optional[int] = Field(None, description='Municipality code')
    province: Optional[str] = Field(None, description='Province')
    provinceCode: Optional[int] = Field(None, description='Province code')
    presets: Optional[List[WeathercamPresetDetailedV1]] = Field(
        None, description='Weathercam presets'
    )


class WeathercamPresetHistoryDtoV1(BaseModel):
    id: str = Field(..., description="Weathercam preset's id")
    dataUpdatedTime: Optional[datetime] = Field(
        None, description='Time when data was last updated'
    )
    history: List[WeathercamPresetHistoryItemDtoV1] = Field(
        ..., description="Weathercam preset's history"
    )


class WeatherStationFeatureSimpleV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    id: int = Field(..., description='Id of the road station')
    geometry: Point
    properties: WeatherStationPropertiesSimpleV1


class WeatherStationFeatureDetailedV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    id: int = Field(..., description='Id of the road station')
    geometry: Point
    properties: WeatherStationPropertiesDetailedV1


class ForecastSectionPropertiesV1(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Forecast section identifier ie. 00004_342_01435_0_274.569: \n1. Road number 5 characters ie. 00004, \n2. Road section 3 characters ie. 342, \n3. Start distance 5 characters ie. 000, \n4. Carriageway 1 character, \n5. Measure value of link start point. Varying number of characters ie. 274.569, \nRefers to Digiroad content at https://aineistot.vayla.fi/digiroad/',
    )
    description: Optional[str] = Field(None, description='Forecast section description')
    roadSectionNumber: Optional[int] = Field(None, description='Road section number')
    roadNumber: Optional[int] = Field(None, description='Forecast section road number')
    length: Optional[int] = Field(None, description='Forecast section length in meters')
    roadSegments: Optional[List[RoadSegmentDtoV1]] = Field(
        None,
        description='Forecast section road segments. Refers to https://aineistot.vayla.fi/digiroad/',
    )
    linkIds: Optional[List[int]] = Field(
        None,
        description='Forecast section link indices. Refers to https://aineistot.vayla.fi/digiroad/',
    )
    dataUpdatedTime: datetime = Field(..., description='Data last updated date time')


class ForecastSectionWeatherDtoV1(BaseModel):
    id: Optional[str] = Field(
        None,
        description='VERSION 1: Forecast section identifier 15 characters ie. 00004_112_000_0: <br>\n1. Road number 5 characters ie. 00004, <br>\n2. Road section 3 characters ie. 112, <br>\n3. Road section version 3 characters ie. 000, <br>\n4. Reserved for future needs 1 characters default 0 <br>\n<br>\nVERSION 2: Forecast section identifier ie. 00004_342_01435_0_274.569: <br>\n1. Road number 5 characters ie. 00004, <br>\n2. Road section 3 characters ie. 342, <br>\n3. Start distance 5 characters ie. 000, <br>\n4. Carriageway 1 character, <br>\n5. Measure value of link start point. Varying number of characters ie. 274.569, <br>\nRefers to Digiroad content at https://aineistot.vayla.fi/digiroad/',
    )
    forecasts: Optional[List[ForecastSectionWeatherForecastDtoV1]] = Field(
        None, description="Forecast section's weather forecasts"
    )
    dataUpdatedTime: datetime = Field(..., description='Data last updated time')


class ForecastSectionsWeatherDtoV1(BaseModel):
    dataUpdatedTime: datetime = Field(..., description='Data last updated time')
    forecastSections: Optional[List[ForecastSectionWeatherDtoV1]] = Field(
        None, description='Forecast sections'
    )


class ForecastSectionFeatureSimpleV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    id: str = Field(
        ...,
        description='Forecast section identifier 15 characters ie. 00004_112_000_0, see properties id description.',
    )
    geometry: LineString
    properties: ForecastSectionPropertiesSimpleV1


class VariableSignFeatureV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    geometry: Point
    properties: VariableSignPropertiesV1


class AreaLocationV1(BaseModel):
    areas: List[AreaV1] = Field(..., description='List of areas')


class FeatureV1(BaseModel):
    name: str = Field(
        ...,
        description='Feature name, e.g.black ice on road, or speed limit',
        example='speed limit',
    )
    quantity: Optional[float] = Field(
        None,
        description='Feature quantity, e.g. 30 in {speed limit, 30, km/h}',
        example=30,
    )
    unit: Optional[str] = Field(
        None,
        description='Unit of the feature quantity, e.g. km/h in {speed limit, 30, km/h}',
        example='km/h',
    )
    description: Optional[str] = Field(
        None,
        description='Further details of the feature, e.g. description of a detour',
        example='The road is narrow and winding',
    )
    timeAndDuration: Optional[TimeAndDurationV1] = None


class ItineraryLegV1(BaseModel):
    roadLeg: Optional[ItineraryRoadLegV1] = None
    streetName: Optional[str] = Field(
        None, description='Name of the street if leg is on the street network'
    )


class LastActiveItinerarySegmentV1(BaseModel):
    startTime: datetime = Field(
        ..., description='The time when the transport may start this segment.'
    )
    endTime: datetime = Field(
        ..., description='Time by which the transport has finished this segment.'
    )
    legs: List[ItineraryLegV1] = Field(..., description='Route legs.')


class RestrictionV1(BaseModel):
    type: Optional[Type11] = Field(None, description='Type of the restriction.')
    restriction: Optional[FeatureV1] = None


class RoadPointV1(BaseModel):
    municipality: Optional[str] = Field(None, description='City, town or village.')
    province: Optional[str] = Field(None, description='Province eq. Satakunta.')
    country: Optional[str] = Field(
        None,
        description='Usually Finland, but may be something else eq. Sweden, Norway, Russia.',
    )
    roadAddress: TrafficMessageRoadAddressV1
    roadName: Optional[str] = Field(
        None, description='Name of the road where the accident happened.'
    )
    alertCLocation: AlertCLocationV1


class LocationFeatureV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    id: int = Field(..., description='Unique locationCode for this location')
    geometry: Point
    properties: LocationPropertiesV1


class RegionGeometryFeatureV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    geometry: Union[
        LineString, MultiLineString, MultiPoint, MultiPolygon, Point, Polygon
    ]
    properties: RegionGeometryPropertiesV1


class TmsStationFeatureSimpleV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    id: int = Field(..., description='Id of the road station')
    geometry: Point
    properties: TmsStationPropertiesSimpleV1


class TmsStationFeatureDetailedV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    id: int = Field(..., description='Id of the road station')
    geometry: Point
    properties: TmsStationPropertiesDetailedV1


class MaintenanceTrackingFeatureV1(BaseModel):
    type: Type13 = Field(..., description='GeoJSON Feature Object')
    properties: MaintenanceTrackingPropertiesV1
    geometry: Union[
        LineString, MultiLineString, MultiPoint, MultiPolygon, Point, Polygon
    ]


class MaintenanceTrackingLatestFeatureV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    properties: MaintenanceTrackingLatestPropertiesV1
    geometry: Union[
        LineString, MultiLineString, MultiPoint, MultiPolygon, Point, Polygon
    ]


class CountersModel(BaseModel):
    features: List[CounterFeatureModel]
    type: Type = Field(..., description='FeatureCollection')
    dataUpdatedTime: Optional[datetime] = Field(
        None, description='Data updated timestamp'
    )


class WeathercamStationFeatureCollectionSimpleV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    dataUpdatedTime: datetime = Field(..., description='Data last updated date time')
    features: List[WeathercamStationFeatureSimpleV1] = Field(
        ..., description='GeoJSON Feature Objects'
    )


class WeathercamStationFeatureV1Detailed(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    id: str = Field(..., description='Id of the road station')
    geometry: Point
    properties: WeathercamStationPropertiesDetailedV1


class PresetHistory(BaseModel):
    id: str = Field(..., description='Id of the road station')
    dataUpdatedTime: Optional[datetime] = Field(
        None, description='Time when data was last updated'
    )
    presets: List[WeathercamPresetHistoryDtoV1] = Field(
        ..., description='Weathercam presets histories'
    )


class CameraHistory(BaseModel):
    dataUpdatedTime: datetime = Field(
        ..., description='Time when data was last updated'
    )
    stations: Optional[List[PresetHistory]] = Field(None, description='Stations data')


class WeatherStationFeatureCollectionSimpleV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    dataUpdatedTime: datetime = Field(..., description='Data last updated date time')
    features: List[WeatherStationFeatureSimpleV1] = Field(
        ..., description='GeoJSON Feature Objects'
    )


class ForecastSectionFeatureV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    id: Optional[str] = Field(
        None,
        description='Forecast section identifier ie. 00004_342_01435_0_274.569: \n1. Road number 5 characters ie. 00004, \n2. Road section 3 characters ie. 342, \n3. Start distance 5 characters ie. 000, \n4. Carriageway 1 character, \n5. Measure value of link start point. Varying number of characters ie. 274.569, \nRefers to Digiroad content at https://aineistot.vayla.fi/digiroad/',
    )
    geometry: Union[
        LineString, MultiLineString, MultiPoint, MultiPolygon, Point, Polygon
    ]
    properties: ForecastSectionPropertiesV1


class ForecastSectionFeatureCollectionSimpleV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    dataUpdatedTime: datetime = Field(..., description='Data last updated date time')
    features: List[ForecastSectionFeatureSimpleV1] = Field(
        ..., description='GeoJSON Feature Objects'
    )


class VariableSignFeatureCollectionV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    dataUpdatedTime: datetime = Field(..., description='Data last updated date time')
    features: List[VariableSignFeatureV1] = Field(
        ..., description='GeoJSON Feature Objects'
    )


class RoadAddressLocationV1(BaseModel):
    primaryPoint: RoadPointV1
    secondaryPoint: Optional[RoadPointV1] = None
    direction: Direction1 = Field(..., description='Affected road direction')
    directionDescription: Optional[str] = Field(
        None, description='Human readable description of the affected direction'
    )


class LocationFeatureCollectionV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    locationsVersion: str = Field(..., description='Locations version')
    dataUpdatedTime: datetime = Field(..., description='Data last updated date time')
    features: List[LocationFeatureV1] = Field(
        ..., description='GeoJSON Feature Objects'
    )


class RegionGeometryFeatureCollectionV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    dataUpdatedTime: datetime = Field(..., description='Data last updated date time')
    features: List[RegionGeometryFeatureV1] = Field(
        ..., description='GeoJSON Feature Objects'
    )


class TmsStationFeatureCollectionSimpleV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    dataUpdatedTime: datetime = Field(..., description='Data last updated date time')
    features: List[TmsStationFeatureSimpleV1] = Field(
        ..., description='GeoJSON Feature Objects'
    )


class MaintenanceTrackingFeatureCollectionV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    dataUpdatedTime: datetime = Field(..., description='Data last updated date time')
    features: List[MaintenanceTrackingFeatureV1] = Field(
        ..., description='GeoJSON Feature Objects'
    )


class MaintenanceTrackingLatestFeatureCollectionV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    dataUpdatedTime: datetime = Field(..., description='Data last updated date time')
    features: List[MaintenanceTrackingLatestFeatureV1] = Field(
        ..., description='GeoJSON Feature Objects'
    )


class ForecastSectionFeatureCollectionV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    dataUpdatedTime: datetime = Field(..., description='Data last updated date time')
    features: List[ForecastSectionFeatureV1] = Field(
        ..., description='GeoJSON Feature Objects'
    )


class LocationDetailsV1(BaseModel):
    areaLocation: Optional[AreaLocationV1] = None
    roadAddressLocation: Optional[RoadAddressLocationV1] = None


class RoadWorkPhaseV1(BaseModel):
    id: str = Field(..., description='id')
    location: Optional[LocationV1] = None
    locationDetails: Optional[LocationDetailsV1] = None
    workingHours: List[WeekdayTimePeriodV1] = Field(
        ..., description='WorkingHours of an traffic situation announcement'
    )
    comment: Optional[str] = Field(None, description='Free comment')
    timeAndDuration: TimeAndDurationV1
    workTypes: Optional[List[WorkTypeV1]] = Field(
        None, description='The types of work that are carried out'
    )
    restrictions: Optional[List[RestrictionV1]] = Field(
        None, description='Restrictions on traffic'
    )
    restrictionsLiftable: Optional[bool] = Field(
        None, description='Restrictions can be lifted for abnormal transports'
    )
    severity: Severity = Field(
        ...,
        description='Severity of the disruption to traffic. How severely this road work phase disrupts traffic. LOW - no disruption, HIGH - disruption, HIGHEST - significant disruption',
    )
    slowTrafficTimes: Optional[List[WeekdayTimePeriodV1]] = Field(
        None,
        description='Time periods when the road work is expected to cause slow moving traffic.',
    )
    queuingTrafficTimes: Optional[List[WeekdayTimePeriodV1]] = Field(
        None,
        description='Time periods when the road work is expected to cause queuing of the traffic.',
    )


class TrafficAnnouncementV1(BaseModel):
    language: Language = Field(
        ...,
        description='Language of the announcement, always fi. A subset of ISO 639-1 in upper case.',
    )
    title: str = Field(..., description='Short description about the situation')
    location: Optional[LocationV1] = None
    locationDetails: Optional[LocationDetailsV1] = None
    features: Optional[List[FeatureV1]] = Field(
        None, description='Features of the announcement'
    )
    roadWorkPhases: Optional[List[RoadWorkPhaseV1]] = Field(
        None, description='Contains the phases of this road maintenance work'
    )
    earlyClosing: Optional[EarlyClosing] = Field(
        None,
        description="Road work was closed before the planned time. 'CLOSED' means the road work closed after its start time, possibly skipping some phases. 'CANCELED' means the road work was canceled before its start time. Note: This field is null if the road work closes normally.",
    )
    comment: Optional[str] = Field(None, description='Free comment')
    timeAndDuration: Optional[TimeAndDurationV1] = None
    additionalInformation: Optional[str] = Field(
        None, description='Additional information.'
    )
    sender: str = Field(..., description='Name of the sender')
    lastActiveItinerarySegment: Optional[LastActiveItinerarySegmentV1] = None


class TrafficAnnouncementPropertiesV1(BaseModel):
    situationId: str = Field(..., description='Situation id')
    situationType: SituationTypeV1
    trafficAnnouncementType: Optional[TrafficAnnouncementType] = Field(
        None, description='Traffic Announcement type'
    )
    version: int = Field(..., description='Announcement version')
    releaseTime: datetime = Field(..., description='Announcement release time')
    versionTime: datetime = Field(..., description='Announcement version time')
    announcements: List[TrafficAnnouncementV1] = Field(
        ...,
        description="Contains announcement's different language versions available.",
    )
    contact: Optional[ContactV1] = None
    dataUpdatedTime: datetime = Field(..., description='Data last updated date time')


class TrafficAnnouncementFeatureV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    geometry: Union[
        LineString, MultiLineString, MultiPoint, MultiPolygon, Point, Polygon
    ]
    properties: TrafficAnnouncementPropertiesV1


class TrafficAnnouncementFeatureCollectionV1(BaseModel):
    type: str = Field(..., description='GeoJSON Object Type')
    dataUpdatedTime: datetime = Field(..., description='Data last updated date time')
    features: List[TrafficAnnouncementFeatureV1] = Field(
        ..., description='GeoJSON Feature Objects'
    )


class Address(BaseModel):
    postcode: Optional[str] = None
    city: Optional[MultilingualString] = None
    countryCode: Optional[str] = None
    addressLines: Optional[List[AddressLine]] = None
    get_AddressExtension: Optional[FieldExtensionType] = None


class AddressLine(BaseModel):
    type: FieldAddressLineTypeEnum
    text: MultilingualString
    get_AddressLineExtension: Optional[FieldExtensionType] = None
    order: Optional[int] = None


class Attr(BaseModel):
    name: Optional[str] = None
    value: Optional[str] = None
    specified: Optional[bool] = None
    ownerElement: Optional[Element] = None
    schemaTypeInfo: Optional[TypeInfo] = None
    id: Optional[bool] = None
    attributes: Optional[NamedNodeMap] = None
    localName: Optional[str] = None
    nodeName: Optional[str] = None
    nodeValue: Optional[str] = None
    parentNode: Optional[Node] = None
    childNodes: Optional[NodeList] = None
    firstChild: Optional[Node] = None
    lastChild: Optional[Node] = None
    previousSibling: Optional[Node] = None
    nextSibling: Optional[Node] = None
    ownerDocument: Optional[Document] = None
    namespaceURI: Optional[str] = None
    baseURI: Optional[str] = None
    textContent: Optional[str] = None
    prefix: Optional[str] = None
    nodeType: Optional[int] = None


class AxleCharacteristics(BaseModel):
    maximumWeight: Optional[float] = None
    minimumWeight: Optional[float] = None
    get_AxleCharacteristicsExtension: Optional[FieldExtensionType] = None


class Document(BaseModel):
    doctype: Optional[DocumentType] = None
    documentElement: Optional[Element] = None
    inputEncoding: Optional[str] = None
    xmlEncoding: Optional[str] = None
    xmlStandalone: Optional[bool] = None
    xmlVersion: Optional[str] = None
    strictErrorChecking: Optional[bool] = None
    documentURI: Optional[str] = None
    domConfig: Optional[DOMConfiguration] = None
    implementation: Optional[DOMImplementation] = None
    attributes: Optional[NamedNodeMap] = None
    localName: Optional[str] = None
    nodeName: Optional[str] = None
    nodeValue: Optional[str] = None
    parentNode: Optional[Node] = None
    childNodes: Optional[NodeList] = None
    firstChild: Optional[Node] = None
    lastChild: Optional[Node] = None
    previousSibling: Optional[Node] = None
    nextSibling: Optional[Node] = None
    ownerDocument: Optional[Document] = None
    namespaceURI: Optional[str] = None
    baseURI: Optional[str] = None
    textContent: Optional[str] = None
    prefix: Optional[str] = None
    nodeType: Optional[int] = None


class DocumentType(BaseModel):
    name: Optional[str] = None
    publicId: Optional[str] = None
    systemId: Optional[str] = None
    entities: Optional[NamedNodeMap] = None
    notations: Optional[NamedNodeMap] = None
    internalSubset: Optional[str] = None
    attributes: Optional[NamedNodeMap] = None
    localName: Optional[str] = None
    nodeName: Optional[str] = None
    nodeValue: Optional[str] = None
    parentNode: Optional[Node] = None
    childNodes: Optional[NodeList] = None
    firstChild: Optional[Node] = None
    lastChild: Optional[Node] = None
    previousSibling: Optional[Node] = None
    nextSibling: Optional[Node] = None
    ownerDocument: Optional[Document] = None
    namespaceURI: Optional[str] = None
    baseURI: Optional[str] = None
    textContent: Optional[str] = None
    prefix: Optional[str] = None
    nodeType: Optional[int] = None


class Element(BaseModel):
    schemaTypeInfo: Optional[TypeInfo] = None
    attributeNodeNS: Optional[Attr] = None
    attributeNode: Optional[Attr] = None
    tagName: Optional[str] = None
    attributes: Optional[NamedNodeMap] = None
    localName: Optional[str] = None
    nodeName: Optional[str] = None
    nodeValue: Optional[str] = None
    parentNode: Optional[Node] = None
    childNodes: Optional[NodeList] = None
    firstChild: Optional[Node] = None
    lastChild: Optional[Node] = None
    previousSibling: Optional[Node] = None
    nextSibling: Optional[Node] = None
    ownerDocument: Optional[Document] = None
    namespaceURI: Optional[str] = None
    baseURI: Optional[str] = None
    textContent: Optional[str] = None
    prefix: Optional[str] = None
    nodeType: Optional[int] = None


class Emissions(BaseModel):
    emissionClassificationEuro: Optional[FieldEmissionClassificationEuroEnum] = None
    emissionClassificationOthers: Optional[List[str]] = None
    emissionLevel: Optional[FieldLowEmissionLevelEnum] = None
    get_EmissionsExtension: Optional[FieldEmissionsExtensionType] = None


class FacilityLocation(BaseModel):
    timeZone: Optional[str] = None
    address: Optional[Address] = None


class GrossWeightCharacteristic(BaseModel):
    comparisonOperator: FieldComparisonOperatorEnum
    grossVehicleWeight: Optional[float] = None
    typeOfWeight: FieldWeightTypeEnum
    get_GrossWeightCharacteristicExtension: Optional[FieldExtensionType] = None


class HeaderInformation(BaseModel):
    confidentiality: Optional[FieldConfidentialityValueEnum] = None
    allowedDeliveryChannels: Optional[List[FieldInformationDeliveryServicesEnum]] = None
    informationStatus: FieldInformationStatusEnum
    get_HeaderInformationExtension: Optional[FieldExtensionType] = None


class HeaviestAxleWeightCharacteristic(BaseModel):
    comparisonOperator: FieldComparisonOperatorEnum
    heaviestAxleWeight: Optional[float] = None
    get_HeaviestAxleWeightCharacteristicExtension: Optional[FieldExtensionType] = None


class HeightCharacteristic(BaseModel):
    comparisonOperator: FieldComparisonOperatorEnum
    vehicleHeight: Optional[float] = None
    get_HeightCharacteristicExtension: Optional[FieldExtensionType] = None


class InternationalIdentifier(BaseModel):
    country: Country
    nationalIdentifier: str
    get_InternationalIdentifierExtension: Optional[FieldExtensionType] = None
    internationalIdentifierExtension: Optional[FieldExtensionType] = None


class Lane(BaseModel):
    laneNumber: Optional[int] = None
    laneUsage: Optional[FieldLaneEnum] = None
    get_LaneExtension: Optional[FieldExtensionType] = None


class LengthCharacteristic(BaseModel):
    comparisonOperator: FieldComparisonOperatorEnum
    vehicleLength: Optional[float] = None
    get_LengthCharacteristicExtension: Optional[FieldExtensionType] = None


class LocationReference(BaseModel):
    get_LocationReferenceExtension: Optional[FieldLocationReferenceExtensionType] = None


class MeasurementSite(BaseModel):
    measurementSiteRecordVersionTime: Optional[datetime] = None
    measurementEquipmentReference: Optional[str] = None
    measurementEquipmentTypeUsed: Optional[MultilingualString] = None
    measurementSiteName: Optional[MultilingualString] = None
    measurementSiteNumberOfLanes: Optional[int] = None
    measurementSiteIdentification: Optional[str] = None
    measurementSpecificCharacteristics: Optional[
        List[FieldMeasurementSiteIndexMeasurementSpecificCharacteristics]
    ] = None
    measurementSiteLocation: LocationReference
    informationManagerOverride: Optional[InternationalIdentifier] = None
    get_MeasurementSiteExtension: Optional[FieldExtensionType] = None
    id: Optional[str] = None
    version: Optional[str] = None


class MeasurementSiteTable(BaseModel):
    measurementSiteTableIdentification: Optional[str] = None
    measurementSites: List[MeasurementSite]
    informationManager: Optional[InternationalIdentifier] = None
    get_MeasurementSiteTableExtension: Optional[FieldExtensionType] = None
    id: Optional[str] = None
    version: Optional[str] = None


class MeasurementSiteTablePublication(BaseModel):
    publicationTime: datetime
    publicationCreator: InternationalIdentifier
    get_PayloadPublicationExtension: Optional[FieldExtensionType] = None
    lang: Optional[str] = None
    extensionName: Optional[str] = None
    extensionVersion: Optional[str] = None
    profileName: Optional[str] = None
    profileVersion: Optional[str] = None
    headerInformation: HeaderInformation
    measurementSiteTables: List[MeasurementSiteTable]
    get_MeasurementSiteTablePublicationExtension: Optional[FieldExtensionType] = None


class MeasurementSpecificCharacteristics(BaseModel):
    accuracy: Optional[float] = None
    computationMethod: Optional[FieldComputationMethodEnum] = None
    defaultMeasurementHeight: Optional[float] = None
    measurementSide: Optional[FieldDirectionEnum] = None
    period: Optional[float] = None
    smoothingFactor: Optional[float] = None
    specificMeasurementValueType: FieldMeasuredOrDerivedDataTypeEnum
    specificVehicleCharacteristics: Optional[VehicleCharacteristics] = None
    specificLanes: Optional[List[Lane]] = None
    axleCharacteristics: Optional[AxleCharacteristics] = None
    get_MeasurementSpecificCharacteristicsExtension: Optional[FieldExtensionType] = None


class NamedNodeMap(BaseModel):
    length: Optional[int] = None
    namedItem: Optional[Node] = None
    namedItemNS: Optional[Node] = None


class Node(BaseModel):
    attributes: Optional[NamedNodeMap] = None
    localName: Optional[str] = None
    nodeName: Optional[str] = None
    nodeValue: Optional[str] = None
    parentNode: Optional[Node] = None
    childNodes: Optional[NodeList] = None
    firstChild: Optional[Node] = None
    lastChild: Optional[Node] = None
    previousSibling: Optional[Node] = None
    nextSibling: Optional[Node] = None
    ownerDocument: Optional[Document] = None
    namespaceURI: Optional[str] = None
    baseURI: Optional[str] = None
    textContent: Optional[str] = None
    prefix: Optional[str] = None
    nodeType: Optional[int] = None


class NumberOfAxlesCharacteristic(BaseModel):
    comparisonOperator: FieldComparisonOperatorEnum
    numberOfAxles: int
    get_NumberOfAxlesCharacteristicExtension: Optional[FieldExtensionType] = None


class VehicleCharacteristics(BaseModel):
    fuelTypes: Optional[List[FieldFuelTypeEnum]] = None
    loadType: Optional[FieldLoadTypeEnum] = None
    vehicleEquipment: Optional[FieldVehicleEquipmentEnum] = None
    vehicleTypes: Optional[List[FieldVehicleTypeEnum]] = None
    vehicleUsage: Optional[FieldVehicleUsageEnum] = None
    yearOfFirstRegistration: Optional[int] = None
    grossWeightCharacteristics: Optional[List[GrossWeightCharacteristic]] = None
    heightCharacteristics: Optional[List[HeightCharacteristic]] = None
    lengthCharacteristics: Optional[List[LengthCharacteristic]] = None
    widthCharacteristics: Optional[List[WidthCharacteristic]] = None
    heaviestAxleWeightCharacteristics: Optional[
        List[HeaviestAxleWeightCharacteristic]
    ] = None
    numberOfAxlesCharacteristics: Optional[List[NumberOfAxlesCharacteristic]] = None
    emissions: Optional[Emissions] = None
    get_VehicleCharacteristicsExtension: Optional[FieldExtensionType] = None


class WidthCharacteristic(BaseModel):
    comparisonOperator: FieldComparisonOperatorEnum
    vehicleWidth: Optional[float] = None
    get_WidthCharacteristicExtension: Optional[FieldExtensionType] = None


class FieldEmissionsExtensionType(BaseModel):
    emissionsExtension: Optional[EmissionsExtension] = None
    anies: Optional[List[Element]] = None


class FieldExtensionType(BaseModel):
    anies: Optional[List[Element]] = None


class FieldLocationReferenceExtensionType(BaseModel):
    facilityLocation: Optional[FacilityLocation] = None
    anies: Optional[List[Element]] = None


class FieldMeasurementSiteIndexMeasurementSpecificCharacteristics(BaseModel):
    measurementSpecificCharacteristics: MeasurementSpecificCharacteristics
    index: Optional[int] = None


class DayWeekMonth(BaseModel):
    applicableDaies: Optional[List[FieldDayEnum]] = None
    applicableMonths: Optional[List[FieldMonthOfYearEnum]] = None
    get_DayWeekMonthExtension: Optional[FieldExtensionType] = None


class MeasuredDataPublication(BaseModel):
    publicationTime: datetime
    publicationCreator: InternationalIdentifier
    get_PayloadPublicationExtension: Optional[FieldExtensionType] = None
    lang: Optional[str] = None
    extensionName: Optional[str] = None
    extensionVersion: Optional[str] = None
    profileName: Optional[str] = None
    profileVersion: Optional[str] = None
    measurementSiteTableReferences: List[FieldMeasurementSiteTableVersionedReference]
    headerInformation: HeaderInformation
    siteMeasurements: List[SiteMeasurements]
    get_MeasuredDataPublicationExtension: Optional[FieldExtensionType] = None


class MeasurementOrCalculationTime(BaseModel):
    timeMeaning: Optional[FieldTimeMeaningEnum] = None
    timeValue: Optional[datetime] = None
    period: Optional[Period] = None
    get_MeasurementOrCalculationTimeExtension: Optional[FieldExtensionType] = None
    timePrecision: Optional[TimePrecision] = None


class Period(BaseModel):
    startOfPeriod: Optional[datetime] = None
    endOfPeriod: Optional[datetime] = None
    periodName: Optional[MultilingualString] = None
    recurringTimePeriodOfDaies: Optional[List[TimePeriodOfDay]] = None
    recurringDayWeekMonthPeriods: Optional[List[DayWeekMonth]] = None
    recurringSpecialDaies: Optional[List[SpecialDay]] = None
    get_PeriodExtension: Optional[FieldExtensionType] = None


class PhysicalQuantity(BaseModel):
    forecast: Optional[bool] = None
    measurementEquipmentTypeUsed: Optional[MultilingualString] = None
    pertinentLocation: Optional[LocationReference] = None
    physicalQuantityFaults: Optional[List[PhysicalQuantityFault]] = None
    source: Optional[Source] = None
    informationManagerOverride: Optional[InternationalIdentifier] = None
    get_PhysicalQuantityExtension: Optional[FieldExtensionType] = None


class PhysicalQuantityFault(BaseModel):
    faultLastUpdateTime: datetime
    get_FaultExtension: Optional[FieldExtensionType] = None
    physicalQuantityFaultType: FieldPhysicalQuantityFaultEnum
    get_PhysicalQuantityFaultExtension: Optional[FieldExtensionType] = None


class SiteMeasurements(BaseModel):
    measurementSiteReference: FieldMeasurementSiteVersionedReference
    physicalQuantities: Optional[List[FieldSiteMeasurementsIndexPhysicalQuantity]] = (
        None
    )
    measurementTimeDefault: MeasurementOrCalculationTime
    get_SiteMeasurementsExtension: Optional[FieldExtensionType] = None


class Source(BaseModel):
    sourceCountry: Optional[str] = None
    sourceIdentification: Optional[str] = None
    sourceName: Optional[MultilingualString] = None
    sourceType: Optional[FieldSourceTypeEnum] = None
    reliable: Optional[bool] = None
    get_SourceExtension: Optional[FieldExtensionType] = None


class SpecialDay(BaseModel):
    intersectWithApplicableDays: Optional[bool] = None
    specialDayType: FieldSpecialDayTypeEnum
    publicEvent: Optional[FieldPublicEventTypeEnum] = None
    namedAreas: Optional[List[NamedArea]] = None
    get_SpecialDayExtension: Optional[FieldExtensionType] = None


class TimePeriodOfDay(BaseModel):
    startTimeOfPeriod: datetime
    endTimeOfPeriod: datetime
    get_TimePeriodOfDayExtension: Optional[FieldExtensionType] = None


class FieldSiteMeasurementsIndexPhysicalQuantity(BaseModel):
    physicalQuantity: PhysicalQuantity
    index: Optional[int] = None


class CatalogueReference(BaseModel):
    keyCatalogueReference: str
    catalogueReferenceExtension: Optional[FieldExtensionType] = None


class D2LogicalModel(BaseModel):
    exchange: Exchange
    payloadPublication: Optional[PayloadPublication] = None
    d2LogicalModelExtension: Optional[FieldExtensionType] = None


class Exchange(BaseModel):
    changedFlag: Optional[ChangedFlag] = None
    clientIdentification: Optional[str] = None
    deliveryBreak: Optional[bool] = None
    denyReason: Optional[DenyReason] = None
    historicalStartDate: Optional[datetime] = None
    historicalStopDate: Optional[datetime] = None
    keepAlive: Optional[bool] = None
    requestType: Optional[RequestType] = None
    response: Optional[Response] = None
    subscriptionReference: Optional[str] = None
    supplierIdentification: InternationalIdentifier
    target: Optional[Target] = None
    subscription: Optional[Subscription] = None
    filterReferences: Optional[List[FilterReference]] = None
    catalogueReferences: Optional[List[CatalogueReference]] = None
    exchangeExtension: Optional[FieldExtensionType] = None


class FilterReference(BaseModel):
    deleteFilter: Optional[bool] = None
    filterOperationApproved: Optional[bool] = None
    keyFilterReference: str
    filterReferenceExtension: Optional[FieldExtensionType] = None


class PayloadPublication(BaseModel):
    feedDescription: Optional[MultilingualString] = None
    feedType: Optional[str] = None
    publicationTime: datetime
    publicationCreator: InternationalIdentifier
    payloadPublicationExtension: Optional[FieldExtensionType] = None
    lang: Optional[str] = None


class Subscription(BaseModel):
    deleteSubscription: Optional[bool] = None
    deliveryInterval: Optional[float] = None
    operatingMode: OperatingMode
    subscriptionStartTime: datetime
    subscriptionState: SubscriptionState
    subscriptionStopTime: Optional[datetime] = None
    updateMethod: UpdateMethod
    targets: List[Target]
    filterReference: Optional[FilterReference] = None
    catalogueReference: Optional[CatalogueReference] = None
    subscriptionExtension: Optional[FieldExtensionType] = None


class Target(BaseModel):
    address: str
    protocol: str
    targetExtension: Optional[FieldExtensionType] = None


Address.update_forward_refs()
AddressLine.update_forward_refs()
Attr.update_forward_refs()
AxleCharacteristics.update_forward_refs()
Document.update_forward_refs()
DocumentType.update_forward_refs()
Element.update_forward_refs()
Emissions.update_forward_refs()
GrossWeightCharacteristic.update_forward_refs()
HeaderInformation.update_forward_refs()
HeaviestAxleWeightCharacteristic.update_forward_refs()
HeightCharacteristic.update_forward_refs()
InternationalIdentifier.update_forward_refs()
Lane.update_forward_refs()
LengthCharacteristic.update_forward_refs()
LocationReference.update_forward_refs()
MeasurementSite.update_forward_refs()
MeasurementSiteTable.update_forward_refs()
MeasurementSiteTablePublication.update_forward_refs()
MeasurementSpecificCharacteristics.update_forward_refs()
NamedNodeMap.update_forward_refs()
NumberOfAxlesCharacteristic.update_forward_refs()
VehicleCharacteristics.update_forward_refs()
WidthCharacteristic.update_forward_refs()
MeasuredDataPublication.update_forward_refs()
MeasurementOrCalculationTime.update_forward_refs()
Period.update_forward_refs()
PhysicalQuantity.update_forward_refs()
SiteMeasurements.update_forward_refs()
D2LogicalModel.update_forward_refs()
Exchange.update_forward_refs()
Subscription.update_forward_refs()
