"""This module is used to capture images from YouTube live."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_ytlive.ipynb.

# %% auto 0
__all__ = ['nakyma_helsinki_known_places', 'nakyma_helsinkigista_youtube_live_url', 'ydl_opts', 'stream_url', 'show_frame',
           'crop_frame', 'frame_to_text', 'known', 'meta', 'fname', 'capture_youtube_live_frame']

# %% ../nbs/01_ytlive.ipynb 3
from datetime import datetime
from IPython.display import Image, display
from matplotlib import pyplot as plt
from pathlib import Path
from PIL import Image
import cv2
import glob
import matplotlib.pyplot as plt
import os
import pytesseract
import time
import yt_dlp as youtube_dl

# %% ../nbs/01_ytlive.ipynb 5
nakyma_helsinki_known_places = [
    "Olympiaterminaali",
    "Etelasatama",
    #"Eteläsatama",  # fixup
    "Eteladsatama", # fixup
    "Presidentinlinna",
    "Tuomiokirkko",
    "Kauppatori",
    "Kauppator",    # fixup   
    "Torni",
    "Valkosaari",
]

# %% ../nbs/01_ytlive.ipynb 7
nakyma_helsinkigista_youtube_live_url = "https://www.youtube.com/watch?v=LMZQ7eFhm58"
ydl_opts = {
    'cookiefile': "cookies.txt",  # Path to the exported cookies file,  # Use cookies for authentication
    'download': False  # Set to True if you want to download
}

# %% ../nbs/01_ytlive.ipynb 9
def stream_url(ytlive_url:str, ydl_opts:dict) -> str:
    with youtube_dl.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(ytlive_url, download=False)
        for o in info['formats']:
            if o['resolution'] == '1280x720':
                return o['url']
        else:
            raise ValueError("No 1280x720 format")    

# %% ../nbs/01_ytlive.ipynb 10
def show_frame(frame):
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) # Convert from BGR to RGB for Matplotlib
    plt.imshow(frame_rgb)
    plt.axis('off')  # Hide axes
    plt.show()   

# %% ../nbs/01_ytlive.ipynb 11
def crop_frame(frame, crop=(0, 0, 480, 30)):
    x, y, w, h = crop
    return frame[y:y+h, x:x+w]    

# %% ../nbs/01_ytlive.ipynb 12
def frame_to_text(frame): return pytesseract.image_to_string(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)).strip()

# %% ../nbs/01_ytlive.ipynb 13
def known(txt:str, known_places:str) -> str:
    "try to find one of `known_places` are included in the given `txt`"
    for o in known_places:
        #print(o, "in", txt)
        if o in txt:
            return o
    raise Exception("No place specified")

# %% ../nbs/01_ytlive.ipynb 15
def meta(frame, known_places=nakyma_helsinki_known_places, printing=False):
    "Withdraw meta data, datetime & place"
    # "04.10.2024  14:53:49  Kauppatori", Original format
    txt = frame_to_text(frame)
    if printing==True: print(txt)
    dt = datetime.strptime(txt[:19],"%d.%m.%Y %H:%M:%S")
    pl = known(txt[20:], known_places)
    pl = pl.replace("Eteladsatama", "Etelasatama") # fixup
    pl = pl.replace("ä", "a")                      # fixup
    pl = pl.replace("kauppator", "kauppatori")     # fixup
    return dt, pl

# %% ../nbs/01_ytlive.ipynb 16
def fname(prefix, dt, pl): return f"""{prefix}{dt.strftime("%Y.%m.%d_%H:%M:%S")}_{pl}.jpg"""

# %% ../nbs/01_ytlive.ipynb 18
def capture_youtube_live_frame(youtube_live_url:str=nakyma_helsinkigista_youtube_live_url):
    "Capture a frame from the given YouTube Live URL and save into a JPEG file"

    url = stream_url(youtube_live_url, ydl_opts)
    cap = cv2.VideoCapture(url)
    ret, frame = cap.read()
    #show_frame(crop_frame(frame))
    if ret==False:
        raise Exception("Failed to capture frame.")
    try:        
        path = Path("../data")/fname("cap_", *meta(crop_frame(frame), printing=True))
    except:
        path = Path("../data")/fname("fail_", datetime.now(), "nowhere")
    path.parent.mkdir(parents=True, exist_ok=True)
    cv2.imwrite(path, frame)
    return path
