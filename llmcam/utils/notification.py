"""Python module to implement notification workflow"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utils/03_notification.ipynb.

# %% auto 0
__all__ = ['StreamThread', 'default_stream_starter', 'default_stream_stopper', 'notification_stream_core',
           'process_notification_schema']

# %% ../../nbs/utils/03_notification.ipynb 13
from threading import Thread, Event
import time
from typing import Optional, Callable
from ..core.fc import *
from ..core.fn_to_schema import function_schema

# %% ../../nbs/utils/03_notification.ipynb 14
# Define the stream thread class
class StreamThread(Thread):
    """A class to run a notification stream in a separate thread"""
    def __init__(
        self, 
        thread_id: int,  # The thread ID 
        tools: list,  # List of tools for sub GPT 
        messages: list  # Previous conversation with the user
    ):
        super().__init__()
        self.thread_id = thread_id
        self.stop_event = Event()
        self.tools = tools
        self.messages = messages

    def run(self):
        while not self.stop_event.is_set():
            complete(self.messages, tools=self.tools)
            time.sleep(5)

    def stop(self):
        self.stop_event.set()

# %% ../../nbs/utils/03_notification.ipynb 17
def default_stream_starter(tools, messages):
    """Default function to start the notifications stream"""
    global stream_thread

    # Start the notifications stream
    stream_thread = StreamThread(1, tools, messages)
    stream_thread.start()

def default_stream_stopper():
    """Default function to stop the notifications stream"""
    global stream_thread

    # Stop the notifications stream
    stream_thread.stop()
    stream_thread.join()

# %% ../../nbs/utils/03_notification.ipynb 19
def notification_stream_core(
    tools: list,  # Tools to use
    messages: list,  # Previous conversation with the user
    stream_starter: Optional[Callable] = None,  # Function to start the stream
    send_notification: Optional[Callable] = None,  # Function to send the notification
    stream_stopper: Optional[Callable] = None,  # Function to stop the stream
    send_notification_schema: Optional[dict] = None,  # Schema for the send_notification function
    stream_stopper_schema: Optional[dict] = None,  # Schema for the stream_stopper function
) -> str:
    """Core function to start and stop the notifications stream"""
    # Copy the messages to avoid modifying the original list
    submessages = [ message for message in messages ]

    # Extract subtools schemas
    send_notification_schema = send_notification_schema or function_schema(send_notification, 'send_notification')
    stream_stopper_schema = stream_stopper_schema or function_schema(stream_stopper, 'send_notification')

    # Add sending notification services to tool schema
    subtools = [ tool for tool in tools if tool['function']['name'] != 'start_notification_stream' ]
    subtools.append(send_notification_schema)
    subtools.append(stream_stopper_schema)

    # Start the notifications stream
    stream_starter(subtools, submessages)

    return 'Notifications stream started'

# %% ../../nbs/utils/03_notification.ipynb 21
def process_notification_schema(
    start_notifications_stream: Callable,  # Function to start the notifications stream
):
    """Process the notification schema"""
    notification_schema = function_schema(start_notifications_stream, 'notification')

    notification_schema['function']['parameters'] = {
        'type': 'object',
        'properties': {
            'messages': {
                'description': 'All the previous messages in the conversation',
                'type': 'array',
                'items': {
                    'type': 'object',
                    'properties': {
                        'role': {
                            'type': 'string',
                            'enum': ['user', 'tool', 'system', 'assistant']
                        },
                        'content': {
                            'type': 'string'
                        }
                    }
                }
            }
        }
    }
    return notification_schema
