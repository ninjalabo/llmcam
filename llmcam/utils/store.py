"""Python module for dynamically updating tools and constructing AppletStore."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utils/01_store.ipynb.

# %% auto 0
__all__ = ['add_function_tools', 'add_api_tools', 'remove_tools', 'execute_handler_core', 'handler_schema']

# %% ../../nbs/utils/01_store.ipynb 5
from importlib import import_module
from ..core.fn_to_schema import function_schema
from ..core.oas_to_schema import load_oas, api_schema, generate_request
from typing import Callable, Optional, Any 

# %% ../../nbs/utils/01_store.ipynb 7
def add_function_tools(
    tools: list,  # List of existing tools
    service_name: str,  # Name of the service
    function_names: list[str],  # List of function names (with module prefix)
):
    """Add function tools to the toolbox."""
    # Import functions
    for function_name in function_names:
        # Get module prefix
        module_prefix = function_name.split(".")
        if len(module_prefix) == 1:
            module_prefix = "builtins"
        else:
            module_prefix = ".".join(module_prefix[:-1])

        # Get function name without module prefix
        func_name = function_name.split(".")[-1]

        # Import function
        if module_prefix == "builtins":
            func: Callable = getattr(__builtins__, func_name, None)
        else:
            func: Callable = getattr(import_module(module_prefix), func_name, None)

        # Raise error if function not found
        if func is None:
            raise ValueError(f"Function not found: {function_name}")
        
        # Create tool schema and append to toolbox
        tools.append(function_schema(func=func, service_name=service_name))

# %% ../../nbs/utils/01_store.ipynb 12
def add_api_tools(
    tools: list,  # List of existing tools
    service_name: str,  # Name of the API service
    base_url: str,  # Base URL of the API service
    oas_url: Optional[str] = None,  # OpenAPI Specification URL
    oas_destination: Optional[str] = None # OpenAPI Specification destination file
):
    """Add API tools to the toolbox."""
    # Load OpenAPI Specification
    if oas_url is None:
        oas_url = f"{base_url}/swagger/openapi.json"
    if oas_destination is None:
        oas_destination = f"api/{service_name}.json"
    oas = load_oas(oas_url, oas_destination, overwrite=True)

    # Create tool schema and append to toolbox
    schema = api_schema(base_url, oas, service_name=service_name, fixup=generate_request)
    tools.extend(schema)

# %% ../../nbs/utils/01_store.ipynb 17
def remove_tools(
    tools: list,  # List of existing tools
    service_name: str  # Name of the service
):
    """Remove tools from the toolbox."""
    tools[:] = [tool for tool in tools if ("service" not in tool["function"]["metadata"] or \
                                       tool["function"]["metadata"]["service"] != service_name)]

# %% ../../nbs/utils/01_store.ipynb 20
def execute_handler_core(
    tools: list, # Tools for each session
    function_name: str,  # Name of the function to execute
    module: str,  # Module of the function
    **kwargs  # Keyword arguments
):
    """Execute the handler function by retrieving function with session ID."""
    # Get the function
    module = import_module(module)
    function = getattr(module, function_name, None)
    if function is None:
        raise ValueError(f"Function not found: {function_name}")
    
    if "service" in kwargs:
        del kwargs["service"]
    
    # Execute the function
    function(tools, **kwargs)

# %% ../../nbs/utils/01_store.ipynb 21
def handler_schema(
    function: Callable,  # Handler function
    service_name: str = "toolbox_handler",  # Name of the service
    fixup: Optional[Callable] = None,  # Function to fixup function execution
    **kwargs  # Additional keyword arguments
):
    """Create a schema for handlers."""
    # Create schema from function
    schema = function_schema(
        func=function, 
        service_name=service_name,
        fixup=fixup,
        **kwargs)
    
    # Remove tools from parameters to ensure that the fixup is called
    if "tools" in schema["function"]["parameters"]["properties"]:
        del schema["function"]["parameters"]["properties"]["tools"]
        schema["function"]["parameters"]["required"].remove("tools")
    
    # Return schema
    return schema
