"""This module is used to capture images from YouTube live."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/01_ytlive.ipynb.

# %% auto 0
__all__ = ['YouTubeLive']

# %% ../../../nbs/01_ytlive.ipynb 3
import yt_dlp as youtube_dl

# %% ../../../nbs/01_ytlive.ipynb 9
import cv2
import yt_dlp as youtube_dl
import time
from IPython.display import Image, display
from pathlib import Path

class YouTubeLive:
    def __init__(self, url="https://www.youtube.com/watch?v=LMZQ7eFhm58"):
        self.youtube_live_url = url
        self.stream_live_url = self.stream_url(url)
    
    def stream_url(self, youtube_live_url):
        assert self.youtube_live_url != None, "self.youtube_live_url == None"
        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(youtube_live_url, download=False)
            for o in info['formats']:
                if o['resolution'] == '1280x720':
                    return o['url']
            raise ValueError("No 1280x720 format")
            return None
    
    def capture_frame(self, crop_region=None):
        """Capture a frame from the live stream with cropped a region"""
        assert self.stream_live_url != None
        cap = cv2.VideoCapture(self.stream_live_url)
        if not cap.isOpened():
            print("Error: Could not open video stream.")
            return None
    
        ret, frame = cap.read()
        if ret:
            if crop_region:
                x, y, w, h = crop_region
                frame = frame[y:y+h, x:x+w]
            path = Path("../data")/("frame_" + str(int(time.time())) + ".jpg")
            cv2.imwrite(path, frame)
            print(path)
            return path
        else:
            print("Error: Could not capture frame.")
            return None

    def capture_frames(self):
        for i in range(9999):
            print(i, end=": ")
            self.capture_frame()
            time.sleep(80)

    def dump(self, format=None):
        #display(Image(self.capture_frame((0,0,500,30))))
        display(Image(self.capture_frame()))
