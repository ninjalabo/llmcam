"""Python module for capturing images from pre-determined addresses"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/vision/04_dtcam.ipynb.

# %% auto 0
__all__ = ['stations_url', 'build_address_book', 'address_book', 'camera_address_book', 'stations', 'presets', 'capture', 'cap']

# %% ../../nbs/vision/04_dtcam.ipynb 3
from PIL import Image
from pathlib import Path
from io import BytesIO
from datetime import datetime
from typing import Optional

import json
import os
import requests

# %% ../../nbs/vision/04_dtcam.ipynb 5
stations_url = "https://tie.digitraffic.fi/api/weathercam/v1/stations"

# %% ../../nbs/vision/04_dtcam.ipynb 7
def build_address_book(stations_url:str):
    table = []
    stations = requests.get(stations_url).json()['features']
    for station in stations:
        station = requests.get(stations_url+'/'+station['id']).json().get('properties')
        if not station:
            continue
        for preset in station['presets']:
            try:
                addr = ",".join([preset['presentationName'], station['names'].get('fi'), station['municipality'], station['province']])
            except:
                continue
            info = {
                #"id": preset['id'],
                "address": addr,
                "url": preset['imageUrl'],
            }
            table.append(info)
    return table

# %% ../../nbs/vision/04_dtcam.ipynb 8
def address_book(stations_url:str=stations_url, force_update=False):
    """Get an address book [{"address":<camera installed address>, "url":<image capture url>}]"""
    # Attempt to load from cache
    if not force_update and os.path.exists("preset_image_url.json"):
        with open("preset_image_url.json", "r") as f:
            return json.load(f)
        
    # Build and cache
    data = build_address_book(stations_url)
    with open("preset_image_url.json", "w") as f:
        json.dump(data, f, indent=4) 
    return data

# %% ../../nbs/vision/04_dtcam.ipynb 9
def camera_address_book(
    stations_url: Optional[str] = stations_url,  # Weather Camera URL
    update: Optional[bool] = False,  # Update addressbook forcely
) -> str:  # List of `"camera location"`:`"image url"`
    """Get weather camera location addressbook of `camera location`:`image url`. You can get an capture of camera from this url"""   
    data = address_book(stations_url, update)
    return json.dumps(data)

# %% ../../nbs/vision/04_dtcam.ipynb 13
def stations(key:str)->list[dict]:
    """"Get all weather station including `key` word"""
    # Get all weather stations
    res = requests.get(stations_url)
    assert res.status_code == 200, f"Failed to get stations with status code {res.status_code}"

    # Filter stations by region name
    stations = res.json()['features']
    return [st for st in stations if key.lower() in st['properties']['name'].lower()]

# %% ../../nbs/vision/04_dtcam.ipynb 18
def presets(station:dict)->list[dict]:
    """Get all presets at a given weather station"""
    # Get information about one station with station ID
    res = requests.get(stations_url + "/" + station['id'])
    assert res.status_code == 200, f"Failed to get presets {res.status_code}"
    
    # Get presets data
    presets = res.json()['properties']['presets']
    return presets

# %% ../../nbs/vision/04_dtcam.ipynb 22
def capture(preset:dict)->Path:
    """Capture image at a given preset location in a Weather station, and return an image path"""
    # Get image from the preset
    req = requests.get(preset['imageUrl'], headers={'Digitraffic-User': 'NinjaLABO/LLMCAM 1.0'})
    assert req.status_code == 200, f"Failed to get image {req.status_code}"
    
    # Save image to a file
    img = Image.open(BytesIO(req.content))
    dt = datetime.strptime(req.headers["last-modified"], '%a, %d %b %Y %H:%M:%S %Z')
    dtstr = dt.strftime("%Y.%m.%d_%H:%M:%S")
    dir = os.getenv("LLMCAM_DATA", "../data")
    path = f"{dir}/cap_{dtstr}_{preset['presentationName']}_{preset['id']}.jpg"
    img.save(path, format="JPEG")

    # Return request header and image path
    return req.headers, path

# %% ../../nbs/vision/04_dtcam.ipynb 26
def cap(
    key: str = "Porvoo",  # Location keyword
) -> str:  # Image path
    """Capture an image at specified location, save it, and return its path"""
    _, path = capture(presets(stations(key)[0])[0])
    return str(path)
