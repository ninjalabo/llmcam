"""Capture images from pre-determined addresses"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/Vision/04_dtcam.ipynb.

# %% auto 0
__all__ = ['stations_url', 'camera_address_book', 'stations', 'presets', 'capture', 'cap']

# %% ../../nbs/Vision/04_dtcam.ipynb 4
import requests
from pathlib import Path
from PIL import Image
from io import BytesIO
from datetime import datetime
import os

# %% ../../nbs/Vision/04_dtcam.ipynb 5
stations_url = "https://tie.digitraffic.fi/api/weathercam/v1/stations"

# %% ../../nbs/Vision/04_dtcam.ipynb 9
def camera_address_book(
    stations_url:str=stations_url, # Weather Camera URL
    update:bool=False,             # Update addressbook forcely
)->str:                            # List of `"camera location"`:`"image url"`
    """get weather camera location addressbook of `camera location`:`image url`. You can get an capture of camera from this url"""   
    data = address_book(stations_url, update)
    return json.dumps(data)

# %% ../../nbs/Vision/04_dtcam.ipynb 13
def stations(key:str)->list[dict]:
    "Get all weather station including `key` word"
    res = requests.get(stations_url)
    assert res.status_code == 200
    stations = res.json()['features']
    return [st for st in stations if key.lower() in st['properties']['name'].lower()]

# %% ../../nbs/Vision/04_dtcam.ipynb 15
def presets(station:dict)->list[dict]:
    "Get all presets at a given weather station"
    res = requests.get(stations_url + "/" + station['id'])
    assert res.status_code == 200
    presets = res.json()['properties']['presets']
    return presets

# %% ../../nbs/Vision/04_dtcam.ipynb 17
def capture(preset:dict)->Path:
    "Capture image at a given preset location in a Weather station, and return an image path"
    req = requests.get(preset['imageUrl'], headers={'Digitraffic-User': 'NinjaLABO/LLMCAM 1.0'})
    assert req.status_code == 200
    img = Image.open(BytesIO(req.content))
    #img.show()
    dt = datetime.strptime(req.headers["last-modified"], '%a, %d %b %Y %H:%M:%S %Z')
    dtstr = dt.strftime("%Y.%m.%d_%H:%M:%S")
    dir = os.getenv("LLMCAM_DATA", "../data")
    path = f"{dir}/cap_{dtstr}_{preset['presentationName']}_{preset['id']}.jpg"
    img.save(path, format="JPEG")
    return req.headers, path

# %% ../../nbs/Vision/04_dtcam.ipynb 21
def cap(
    key:str = "Porvoo", # location keyword
)->str:
    "Capture an image at specified location, save it, and return its path"
    _, path = capture(presets(stations(key)[0])[0])
    return str(path)
