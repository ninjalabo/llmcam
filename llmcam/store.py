"""Module for constructing AppletStore."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/10_store.ipynb.

# %% auto 0
__all__ = ['ToolBox', 'road_digitraffic', 'train_digitraffic', 'marine_digitraffic', 'load_oas', 'add_api_tools',
           'execute_function']

# %% ../nbs/10_store.ipynb 3
import requests
import yaml
import json
import os

from .oas_to_requests import toolbox_schema
from typing import Optional

# %% ../nbs/10_store.ipynb 4
ToolBox = {}

# %% ../nbs/10_store.ipynb 6
def load_oas(
    oas_url: str = "https://tie.digitraffic.fi/swagger/openapi.json",  # OpenAPI Specification URL
    destination: str = "api/road_digitraffic.json",  # Destination file
    overwrite: bool = False  # Overwrite existing file
) -> dict:  # OpenAPI Specification
    """Load OpenAPI Specification from URL or file."""
    # Create destination directory if it does not exist
    os.makedirs(os.path.dirname(destination), exist_ok=True)

    # Download OpenAPI Specification if it does not exist or overwrite is True
    if not os.path.exists(destination) or overwrite:
        r = requests.get(oas_url)
        with open(destination, "w") as f:
            f.write(r.text)

    # Load OpenAPI Specification
    with open(destination, "r") as f:
        if destination.endswith(".json"):
            return json.load(f)
        elif destination.endswith(".yaml") or destination.endswith(".yml"):
            return yaml.load(f)
        else:
            raise ValueError("Invalid file format")

# %% ../nbs/10_store.ipynb 8
road_digitraffic = load_oas(
    oas_url="https://tie.digitraffic.fi/swagger/openapi.json",
    destination="api/road_digitraffic.json",
    overwrite=False
)
train_digitraffic = load_oas(
    oas_url="https://rata.digitraffic.fi/swagger/openapi.json",
    destination="api/train_digitraffic.json",
    overwrite=False
)
marine_digitraffic = load_oas(
    oas_url="https://meri.digitraffic.fi/swagger/openapi.json",
    destination="api/marine_digitraffic.json",
    overwrite=False
)

# %% ../nbs/10_store.ipynb 13
def add_api_tools(
    service_name: str,  # Name of the API service
    base_url: str,  # Base URL of the API service
    oas_url: Optional[str] = None,  # OpenAPI Specification URL
    oas_destination: Optional[str] = None # OpenAPI Specification destination file
):
    """Add API tools to the toolbox."""
    # Load OpenAPI Specification
    if oas_url is None:
        oas_url = f"{base_url}/swagger/openapi.json"
    if oas_destination is None:
        oas_destination = f"api/{service_name}.json"
    oas = load_oas(oas_url, oas_destination, overwrite=True)

    # Create tool schema and append to toolbox
    global ToolBox
    ToolBox[service_name] = toolbox_schema(base_url, oas)

# %% ../nbs/10_store.ipynb 17
from importlib import import_module
from typing import Callable, Any
from .fn_to_fc import tool_schema

# %% ../nbs/10_store.ipynb 22
def execute_function(
    function_name: str,  # Name of the function
    tools: list = [],  # The toolbox schema
    **kwargs  # Keyword arguments
) -> Any:  # Function output
    """Execute function with specified name."""
    # Get function from toolbox
    for tool in tools:
        if tool["function"]["name"] == function_name:
            module = tool["function"]["parameters"]["properties"]["module"]["default"]

    # Import module and get function
    if module is None:
        raise ValueError("Module not found")
    if module == "builtins":
        func: Callable = getattr(__builtins__, function_name, None)
    else:
        func: Callable = getattr(import_module(module), function_name, None)
    
    # Execute function
    if func is None:
        raise ValueError("Function not found")
    return func(**kwargs)

# %% ../nbs/10_store.ipynb 26
add_api_tools(
    service_name="road_digitraffic",
    base_url="https://tie.digitraffic.fi",
    oas_url="https://tie.digitraffic.fi/swagger/openapi.json",
    oas_destination="api/road_digitraffic.json"
)
