"""Module for constructing AppletStore."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/10_store.ipynb.

# %% auto 0
__all__ = ['BASE_TOOLBOX_SCHEMA', 'load_oas', 'add_api_tools', 'add_function_tools', 'create_handlers', 'attach_handlers',
           'execute_handler', 'handler_schema']

# %% ../nbs/10_store.ipynb 3
import requests
import yaml
import json
import os

from .oas_to_requests import toolbox_schema, generate_request
from typing import Optional

# %% ../nbs/10_store.ipynb 5
def load_oas(
    oas_url: str = "https://tie.digitraffic.fi/swagger/openapi.json",  # OpenAPI Specification URL
    destination: str = "api/road_digitraffic.json",  # Destination file
    overwrite: bool = False  # Overwrite existing file
) -> dict:  # OpenAPI Specification
    """Load OpenAPI Specification from URL or file."""
    # Create destination directory if it does not exist
    os.makedirs(os.path.dirname(destination), exist_ok=True)

    # Download OpenAPI Specification if it does not exist or overwrite is True
    if not os.path.exists(destination) or overwrite:
        r = requests.get(oas_url)
        with open(destination, "w") as f:
            f.write(r.text)

    # Load OpenAPI Specification
    with open(destination, "r") as f:
        if destination.endswith(".json"):
            return json.load(f)
        elif destination.endswith(".yaml") or destination.endswith(".yml"):
            return yaml.load(f)
        else:
            raise ValueError("Invalid file format")

# %% ../nbs/10_store.ipynb 14
def add_api_tools(
    tools: list,  # List of existing tools
    service_name: str,  # Name of the API service
    base_url: str,  # Base URL of the API service
    oas_url: Optional[str] = None,  # OpenAPI Specification URL
    oas_destination: Optional[str] = None # OpenAPI Specification destination file
):
    """Add API tools to the toolbox."""
    # Load OpenAPI Specification
    if oas_url is None:
        oas_url = f"{base_url}/swagger/openapi.json"
    if oas_destination is None:
        oas_destination = f"api/{service_name}.json"
    oas = load_oas(oas_url, oas_destination, overwrite=True)

    # Create tool schema and append to toolbox
    schema = toolbox_schema(base_url, oas, service_name=service_name, fixup=generate_request)
    tools.extend(schema)

# %% ../nbs/10_store.ipynb 21
from importlib import import_module
from typing import Callable, Any
from .fn_to_fc import tool_schema

# %% ../nbs/10_store.ipynb 23
def add_function_tools(
    tools: list,  # List of existing tools
    service_name: str,  # Name of the service
    function_names: list[str],  # List of function names (with module prefix)
):
    """Add function tools to the toolbox."""
    # Import functions
    for function_name in function_names:
        # Get module prefix
        module_prefix = function_name.split(".")
        if len(module_prefix) == 1:
            module_prefix = "builtins"
        else:
            module_prefix = ".".join(module_prefix[:-1])

        # Get function name without module prefix
        func_name = function_name.split(".")[-1]

        # Import function
        if module_prefix == "builtins":
            func: Callable = getattr(__builtins__, func_name, None)
        else:
            func: Callable = getattr(import_module(module_prefix), func_name, None)

        # Raise error if function not found
        if func is None:
            raise ValueError(f"Function not found: {function_name}")
        
        # Create tool schema and append to toolbox
        tools.append(tool_schema(func=func, service_name=service_name))

# %% ../nbs/10_store.ipynb 29
import uuid
from copy import deepcopy

# %% ../nbs/10_store.ipynb 30
BASE_TOOLBOX_SCHEMA = {
    "add_api": tool_schema(add_api_tools),
    "add_function": tool_schema(add_function_tools),
    "remove": {
        "type": "function",
        "function": {
            "name": "remove",
            "description": "Remove tools of a specific service from the toolbox.",
            "parameters": {
                "type": "object",
                "properties": {
                    "service_name": {
                        "type": "string",
                        "description": "Name of the service"
                    }
                },
                "required": ["service_name"]
            }
        }
    }
}

# %% ../nbs/10_store.ipynb 31
def create_handlers(
        tools: list  # List of existing tools
    ) -> tuple[Callable, Callable, Callable]:  # Tuple of handler functions
    """Create handlers for adding and removing tools from the toolbox."""
    def handle_add_api(
        service_name: str,  # Name of the API service
        base_url: str,  # Base URL of the API service
        oas_url: Optional[str] = None,  # OpenAPI Specification URL
        **kwargs: Any  # Additional keyword arguments (ignored)
    ) -> None:
        """Handle adding API functions to the toolbox."""
        add_api_tools(tools, service_name, base_url, oas_url)

    def handle_add_function(
        service_name: str,  # Name of the service
        function_names: list[str],  # List of function names (with module prefix)
        **kwargs: Any  # Additional keyword arguments (ignored)
    ) -> None:
        """Handle adding function tools to the toolbox."""
        add_function_tools(tools, service_name, function_names)

    def handle_remove(
        service_name: str,  # Name of the service to remove
        **kwargs: Any  # Additional keyword arguments (ignored)
    ) -> None:
        """Handle removing tools from the toolbox."""
        tools[:] = [tool for tool in tools if ("service" not in tool["function"]["metadata"] or \
                    tool["function"]["metadata"]["service"] != service_name)]

    return handle_add_api, handle_add_function, handle_remove

# %% ../nbs/10_store.ipynb 33
def attach_handlers(
    holder: dict,  # Dictionary of handlers per session
    add_api_handler: Callable = None,  # Handler for adding API functions
    add_function_handler: Callable = None,  # Handler for adding function tools
    remove_handler: Callable = None  # Handler for removing tools
):
    """Attach handlers to the a holder dictionary."""
    # Initialize session information
    session_id = str(uuid.uuid4())
    holder[session_id] = {}

    # Attach handlers to the session
    if add_api_handler is not None:
        holder[session_id]["add_api"] = add_api_handler
    if add_function_handler is not None:
        holder[session_id]["add_function"] = add_function_handler
    if remove_handler is not None:
        holder[session_id]["remove"] = remove_handler

# %% ../nbs/10_store.ipynb 34
def execute_handler(
    function_name: str,  # Name of the function to execute
    session_id: str,  # Session ID
    holder_name: str = "session_handlers",  # Name of the holder
    **kwargs  # Keyword arguments
):
    """Execute the handler function by retrieving function with session ."""
    # Get the holder
    holder = globals().get(holder_name, None)
    if holder is None:
        raise ValueError(f"Holder not found: {holder_name}")

    # Get the session
    session = holder.get(session_id, None)
    if session is None:
        raise ValueError(f"Session not found: {session_id}")

    # Get the function
    function = session.get(function_name, None)
    if function is None:
        raise ValueError(f"Function not found: {function_name}")

    # Execute the function
    function(**kwargs)

# %% ../nbs/10_store.ipynb 35
def handler_schema(
    holder: dict,  # Dictionary of handlers per session
    session_id: str,  # Session ID
    holder_name: str = "session_handlers",  # Name of the holder
    fixup: Optional[Callable] = None  # Function to fixup function execution
):
    """Create a schema for handlers."""
    # Get session handlers from the holder via session ID
    session = holder.get(session_id, None)
    if session is None:
        raise ValueError(f"Session not found: {session_id}")

    # Create schema for each handler
    tools = []
    for key in session.keys():
        schema = deepcopy(BASE_TOOLBOX_SCHEMA[key])
        schema["function"]["name"] = key
        schema["function"]["metadata"] = {
            "session_id": session_id,
            "holder_name": holder_name,
            "service": "toolbox_handler"
        }
        if fixup: schema["function"]['fixup'] = f"{fixup.__module__}.{fixup.__name__}"
        if "tools" in schema["function"]["parameters"]["properties"]:
            del schema["function"]["parameters"]["properties"]["tools"]
            schema["function"]["parameters"]["required"].remove("tools")
        tools.append(schema)
    
    return tools
