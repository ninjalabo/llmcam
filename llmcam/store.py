"""Module for constructing AppletStore."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/10_store.ipynb.

# %% auto 0
__all__ = ['load_oas', 'add_api_tools', 'add_function_tools', 'remove_tools', 'execute_handler_core', 'handler_schema',
           'initialize_handlers', 'setup_fixup']

# %% ../nbs/10_store.ipynb 3
import requests
import yaml
import json
import os

from .oas_to_requests import toolbox_schema, generate_request
from typing import Optional

# %% ../nbs/10_store.ipynb 5
def load_oas(
    oas_url: str = "https://tie.digitraffic.fi/swagger/openapi.json",  # OpenAPI Specification URL
    destination: str = "api/road_digitraffic.json",  # Destination file
    overwrite: bool = False  # Overwrite existing file
) -> dict:  # OpenAPI Specification
    """Load OpenAPI Specification from URL or file."""
    # Create destination directory if it does not exist
    os.makedirs(os.path.dirname(destination), exist_ok=True)

    # Download OpenAPI Specification if it does not exist or overwrite is True
    if not os.path.exists(destination) or overwrite:
        r = requests.get(oas_url)
        with open(destination, "w") as f:
            f.write(r.text)

    # Load OpenAPI Specification
    with open(destination, "r") as f:
        if destination.endswith(".json"):
            return json.load(f)
        elif destination.endswith(".yaml") or destination.endswith(".yml"):
            return yaml.load(f)
        else:
            raise ValueError("Invalid file format")

# %% ../nbs/10_store.ipynb 14
def add_api_tools(
    tools: list,  # List of existing tools
    service_name: str,  # Name of the API service
    base_url: str,  # Base URL of the API service
    oas_url: Optional[str] = None,  # OpenAPI Specification URL
    oas_destination: Optional[str] = None # OpenAPI Specification destination file
):
    """Add API tools to the toolbox."""
    # Load OpenAPI Specification
    if oas_url is None:
        oas_url = f"{base_url}/swagger/openapi.json"
    if oas_destination is None:
        oas_destination = f"api/{service_name}.json"
    oas = load_oas(oas_url, oas_destination, overwrite=True)

    # Create tool schema and append to toolbox
    schema = toolbox_schema(base_url, oas, service_name=service_name, fixup=generate_request)
    tools.extend(schema)

# %% ../nbs/10_store.ipynb 21
from importlib import import_module
from typing import Callable, Any
from .fn_to_fc import tool_schema

# %% ../nbs/10_store.ipynb 23
def add_function_tools(
    tools: list,  # List of existing tools
    service_name: str,  # Name of the service
    function_names: list[str],  # List of function names (with module prefix)
):
    """Add function tools to the toolbox."""
    # Import functions
    for function_name in function_names:
        # Get module prefix
        module_prefix = function_name.split(".")
        if len(module_prefix) == 1:
            module_prefix = "builtins"
        else:
            module_prefix = ".".join(module_prefix[:-1])

        # Get function name without module prefix
        func_name = function_name.split(".")[-1]

        # Import function
        if module_prefix == "builtins":
            func: Callable = getattr(__builtins__, func_name, None)
        else:
            func: Callable = getattr(import_module(module_prefix), func_name, None)

        # Raise error if function not found
        if func is None:
            raise ValueError(f"Function not found: {function_name}")
        
        # Create tool schema and append to toolbox
        tools.append(tool_schema(func=func, service_name=service_name))

# %% ../nbs/10_store.ipynb 29
# Additional functions
def remove_tools(
    tools: list,  # List of existing tools
    service_name: str  # Name of the service
):
    """Remove tools from the toolbox."""
    tools[:] = [tool for tool in tools if ("service" not in tool["function"]["metadata"] or \
                                       tool["function"]["metadata"]["service"] != service_name)]

# %% ../nbs/10_store.ipynb 30
import uuid
import importlib
from copy import deepcopy

# %% ../nbs/10_store.ipynb 31
def execute_handler_core(
    tools: list, # Tools for each session
    function_name: str,  # Name of the function to execute
    module: str,  # Module of the function
    **kwargs  # Keyword arguments
):
    """Execute the handler function by retrieving function with session ID."""
    # Get the function
    module = importlib.import_module(module)
    function = getattr(module, function_name, None)
    if function is None:
        raise ValueError(f"Function not found: {function_name}")
    
    if "service" in kwargs:
        del kwargs["service"]
    
    # Execute the function
    function(tools, **kwargs)

# %% ../nbs/10_store.ipynb 32
def handler_schema(
    function: Callable,  # Handler function
    service_name: str = "toolbox_handler",  # Name of the service
    session_id: Optional[str] = None,  # Session ID
    fixup: Optional[Callable] = None  # Function to fixup function execution
):
    """Create a schema for handlers."""
    schema = tool_schema(function, service_name=service_name)
    schema["function"]["metadata"]["service"] = service_name
    if session_id: schema["function"]["metadata"]["session_id"] = session_id
    if fixup: schema["function"]['fixup'] = f"{fixup.__module__}.{fixup.__name__}"

    if "tools" in schema["function"]["parameters"]["properties"]:
        del schema["function"]["parameters"]["properties"]["tools"]
        schema["function"]["parameters"]["required"].remove("tools")
    
    return schema

# %% ../nbs/10_store.ipynb 33
def initialize_handlers(
    functions: list[Callable],  # List of functions to initialize
    service_name: str = "toolbox_handler",  # Name of the service
    fixup: Optional[Callable] = None,  # Function to fixup function execution
    tools: Optional[list] = [],  # List of tools to attach to
    with_session: bool = False,  # Whether to use sessions
    session_tools: Optional[dict] = None, # Tools for each session
):
    """Initialize handlers"""
    # Initialize the handler schema
    session_id = str(uuid.uuid4()) if with_session else None
    tools.extend([ handler_schema(
        function=function, 
        service_name=service_name, 
        session_id=session_id,
        fixup=fixup
        ) for function in functions ])

    # Attach tools to session
    if with_session and session_tools is not None:
        session_tools[session_id] = tools

    return session_id, tools

# %% ../nbs/10_store.ipynb 34
def setup_fixup(
    fixup_core: Callable,  # Core fixup function
    fixup_name: str,  # Name of the fixup function
    tools: Optional[list] = None,  # List of tools to attach to
    with_session: bool = False,  # Whether to use sessions
    session_tools: Optional[dict] = None, # Tools for each session
):
    """Setup fixup"""
    if with_session:
        if session_tools is None:
            raise ValueError("Session tools must be provided when using sessions")

        # Initialize the fixup function definition
        def fixup(function_name, session_id, **kwargs):
            # Get the tools for the session
            tools = session_tools[session_id]

            # Execute the fixup function
            fixup_core(tools, function_name, **kwargs)
        
        globals()[fixup_name] = fixup
        fixup.__name__ = fixup_name
        return fixup
    
    if tools is None:
        raise ValueError("Tools must be provided when not using sessions")
    def fixup(function_name, **kwargs):
        # Attach the tools to the fixup core
        fixup_core(tools, function_name, **kwargs)

    globals()[fixup_name] = fixup
    fixup.__name__ = fixup_name
    return fixup
